package fr.acinq.eclair.crypto

import fr.acinq.bitcoin.Crypto.{PrivateKey, PublicKey}
import fr.acinq.bitcoin.{BinaryData, Crypto}
import fr.acinq.eclair.wire._
import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

/**
  * Created by fabrice on 10/01/17.
  */
@RunWith(classOf[JUnitRunner])
class SphinxSpec extends FunSuite {

  import Sphinx._
  import SphinxSpec._

  /*
  hop_shared_secret[0] = 0x53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66
  hop_blinding_factor[0] = 0x2ec2e5da605776054187180343287683aa6a51b4b1c04d6dd49c45d8cffb3c36
  hop_ephemeral_pubkey[0] = 0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619

  hop_shared_secret[1] = 0xa6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae
  hop_blinding_factor[1] = 0xbf66c28bc22e598cfd574a1931a2bafbca09163df2261e6d0056b2610dab938f
  hop_ephemeral_pubkey[1] = 0x028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2

  hop_shared_secret[2] = 0x3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc
  hop_blinding_factor[2] = 0xa1f2dadd184eb1627049673f18c6325814384facdee5bfd935d9cb031a1698a5
  hop_ephemeral_pubkey[2] = 0x03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0

  hop_shared_secret[3] = 0x21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d
  hop_blinding_factor[3] = 0x7cfe0b699f35525029ae0fa437c69d0f20f7ed4e3916133f9cacbb13c82ff262
  hop_ephemeral_pubkey[3] = 0x031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595

  hop_shared_secret[4] = 0xb5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328
  hop_blinding_factor[4] = 0xc96e00dddaf57e7edcd4fb5954be5b65b09f17cb6d20651b4e90315be5779205
  hop_ephemeral_pubkey[4] = 0x03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4
  */
  test("generate ephemereal keys and secrets") {
    val (ephkeys, sharedsecrets) = computeEphemerealPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    assert(ephkeys(0) == PublicKey(BinaryData("0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619")))
    assert(sharedsecrets(0) == BinaryData("0x53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66"))
    assert(ephkeys(1) == PublicKey(BinaryData("0x028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2")))
    assert(sharedsecrets(1) == BinaryData("0xa6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae"))
    assert(ephkeys(2) == PublicKey(BinaryData("0x03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0")))
    assert(sharedsecrets(2) == BinaryData("0x3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc"))
    assert(ephkeys(3) == PublicKey(BinaryData("0x031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595")))
    assert(sharedsecrets(3) == BinaryData("0x21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d"))
    assert(ephkeys(4) == PublicKey(BinaryData("0x03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4")))
    assert(sharedsecrets(4) == BinaryData("0xb5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328"))
  }

  /*
  filler = 0x80b23adf2c3947dab3b92bb1c5f70fa32f866cc09aff45c5bc4da1ed291660791aa9a1c5d28fbf8f4ecb4bf7c0a9454c82923e24c7fd0d192ea8e2ead1f17388341f313915949b602d5de1f5cb94b77d42c7dfe84edc13cf9acf541e8243989d967e7d568f26f9209bb52d9f90bfa902f3ec6e3ae9d6215c432206cd3132b69257408002aa020f2fbae32a2d5abee0a3c9fd56329b033939cd6366fbb339aa14
   */
  test("generate filler") {
    val (_, sharedsecrets) = computeEphemerealPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    val filler = generateFiller("rho", sharedsecrets.dropRight(1), 40, 20)
    assert(filler == BinaryData("0x80b23adf2c3947dab3b92bb1c5f70fa32f866cc09aff45c5bc4da1ed291660791aa9a1c5d28fbf8f4ecb4bf7c0a9454c82923e24c7fd0d192ea8e2ead1f17388341f313915949b602d5de1f5cb94b77d42c7dfe84edc13cf9acf541e8243989d967e7d568f26f9209bb52d9f90bfa902f3ec6e3ae9d6215c432206cd3132b69257408002aa020f2fbae32a2d5abee0a3c9fd56329b033939cd6366fbb339aa14"))
  }

  test("parse 1-hop packet") {
    val raw = BinaryData("0102eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f2836866194c4fbecf0a2a21892c45d9b5aa509a365d7d022ca4b0021183e62e8373f4a52c035fd754061ab9e0bc887beff8c95fdb878f7b3a7141453e5f8d22b6351810ae541ce499a09b4a9d9f80d1845c8960c85fc6d1a87bd24b2ce49922898e9353fa268086c00ae8b7f718405b72ad380cdbb38c85e02a00427eb4bdbda8fcd42b44708a9efde49cf753b75ebb389bf84d0bfbf58590e510e034572a01e409c30939e2e4a090ecc89c371820af54e06e4ad5495d4e58718385cca5414552e078fedf284fdc2cc5c070cba21a6a8d4b77525ddbc9a9fca9b2f29aac5783ee8badd709f81c73ff60556cf2ee623af073b5a84799acc1ca46b764f74b97068c7826cc0579794a540d7a55e49eac26a6930340132e946a983240b0cd1b732e305c1042f590c4b26f140fc1cab3ee6f620958e0979f85eddf586c410ce42e93a4d7c803ead45fc47cf4396d284632314d789e73cf3f534126c63fe244069d9e8a7c4f98e7e530fc588e648ef4e641364981b5377542d5e7a4aaab6d35f6df7d3a9d7ca715213599ee02c4dbea4dc78860febe1d29259c64b59b3333ffdaebbaff4e7b31c27a3791f6bf848a58df7c69bb2b1852d2ad357b9919ffdae570b27dc709fba087273d3a4de9e6a6be66db647fb6a8d1a503b3f481befb96745abf5cc4a6bba0f780d5c7759b9e303a2a6b17eb05b6e660f4c474959db183e1cae060e1639227ee0bca03978a238dc4352ed764da7d4f3ed5337f6d0376dff72615beeeeaaeef79ab93e4bcbf18cd8424eb2b6ad7f33d2b4ffd5ea08372e6ed1d984152df17e04c6f73540988d7dd979e020424a163c271151a255966be7edef42167b8facca633649739bab97572b485658cde409e5d4a0f653f1a5911141634e3d2b6079b19347df66f9820755fd517092dae62fb278b0bafcc7ad682f7921b3a455e0c6369988779e26f0458b31bffd7e4e5bfb31944e80f100b2553c3b616e75be18328dc430f6618d55cd7d0962bb916d26ed4b117c46fa29e0a112c02c36020b34a96762db628fa3490828ec2079962ad816ef20ea0bca78fb2b7f7aedd4c47e375e64294d151ff03083730336dea64934003a27730cc1c7dec5049ddba8188123dd191aa71390d43a49fb792a3da7082efa6cced73f00eccea18145fbc84925349f7b552314ab8ed4c491e392aed3b1f03eb79474c294b42e2eba1528da26450aa592cba7ea22e965c54dff0fd6fdfd6b52b9a0f5f762e27fb0e6c3cd326a1ca1c5973de9be881439f702830affeb0c034c18ac8d5c2f135c964bf69de50d6e99bde88e90321ba843d9753c8f83666105d25fafb1a11ea22d62ef6f1fc34ca4e60c35d69773a104d9a44728c08c20b6314327301a2c400a71e1424c12628cf9f4a67990ade8a2203b0edb96c6082d4673b7309cd52c4b32b02951db2f66c6c72bd6c7eac2b50b83830c75cdfc3d6e9c2b592c45ed5fa5f6ec0da85710b7e1562aea363e28665835791dc574d9a70b2e5e2b9973ab590d45b94d244fc")
    val Sphinx.ParsedPacket(payload, nextPacket, sharedSecret) = Sphinx.parsePacket(privKeys(0), associatedData, raw)
    assert(nextPacket == BinaryData("01028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6ec5a55b01cd0aca21fe5f9c907691fb026d0c56788b03ca3f08db0abb9f901098dde2ec4003568bc3ca27475ff86a7cb0aab"))
  }

  test("parse 2-hop packet") {
    val raw = BinaryData("0102eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619a84f87d4cf02e4f0387456161c04017b7e5e3a72a4b0021183e62e8373f4a52c035fd754061ab9e0bc887beff8c95fdb878f7b3a71d07f2d00f9c77994251e861f162dde3da7bda32dc2d59599fb5b04a0dacb131d6b2f9e0c766dca91fc29ec8bf8e1c482940a72a5d3e5eeefdf9910c08a542e8c43f8111c9aed119dc3cf18e1abe4db1802a58b8e177752763920dca5e06ff30e3337ba365c0972bf5efb526ad11a3baf39843c89331ffb6a4d0ee8f0b95c59b5a33e3e0464ab184f10860bb582c6a5760ec04680f6b1bbde967158fda50d1f580c36634a5d7abe0185f776b89bce245e8777fb2b843979406056c302ccffd69a88ce6b2a52dc6f32272e25d91bf72f055667873fa9a7aaec4eb90d432ed1c40a921feb844886f413f4083f1b7de79bd72e236e671cc623df4b8a5c5cebe2656d1cf8d43685d8ceb3a2c0c99f69265c887e618633e00e172a38db887c8c4b368c681a154afcdf399d755c442babcf03d1ab7aa3d28622639ea9596e7fa7774348b9880d02459819633c5669d80b58a8c3761812930887d88a17fe57234242dc592720eb17d408c0db18b164613bc0c0f77cf36e8bd27a573d7f204d2eb6cf4a72675499a4c426b3c9c484f1c24f007bbe91b25b1d0133b912deb9b9c2f5fa087dcec26d9c4624c9575afd80ff6be481c55d864c4a85801adf2a499e0a51846d954eabcd50de52b0248360e3a54fbb4f7ced9cb7cbb5a987003c622fb269d1517eddc9142c3ffa87e0973173eff9d5f24105ca0b6d50acdef393c8ee70f6d221853e2fc265a9a2792cc7b61f26823ec2d3db1bd2287c5d665aa3143e1f1216fef8f7236801e860925567bdb2868ef80bdc9b5b83b1cdbf17c4cc740bbec1db724e9cb5ea2b33442e5ac1624236c3be33dc8c9d7bd5415bfeb72f4f44fbf9a88bd63e585ff5572dca1cce859defa6dcc115f1ec71d38cf1547e6dc07ffb0dc156b81acadd91a72386a4b809f05999ab277204e115f7ca54245774338ce027f3e11f24561412e742e64854d6df45a1dc109b0bfa0ac7bfb70ffb93801099f6262e807d1cd8526f64a6683a3d624fcbd5dfdc23599e9015f84926bc66fa29c9003308e58500da4cd52b89f4d287b1e03838b13ce9d9b16a3c3e560937dcb3aa7e02b6b628297ca4ec4ee5181dd987908a9f38966c8eece3024476273f9ab222825ed1523ad6624c213ab83124590a32ad4abb63b2bace9563c559cf7ab5d5320ca199890265c9f0495b4714f24438c16e12b55bae6059aeab65ef87dec58ebfcfb81ca8413f4fe3dff01037f48e68b7d5bc745f4873e054af9645e40b9dbc042b312c5949e876faf22da920a546043644d688356f185b624df2908e344765ea0e4036db041532983496ec34a0865150d71319c89bc86a1ff216f87ce478dd6b264990eceea7eb135eede449d88afc87df0c64dbf40bbdaa817ce0fd5a7eb7b0b0053b9cc01f2a16b63ef5bfb8baf1c6c3feada8a0866f197e60bb43eac5b59fc9d55adcda2e")
    val Sphinx.ParsedPacket(payload, nextPacket, sharedSecret) = Sphinx.parsePacket(privKeys(0), associatedData, raw)
    val Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket)
    assert(Seq(payload, payload1) == payloads.take(2))
    val Sphinx.Packet(_, _, hmac, _) = Sphinx.Packet.read(nextPacket1)
    assert(hmac == Sphinx.zeroes(Sphinx.MacLength))
  }

  test("create 1-hop packet") {
    val Sphinx.OnionPacket(onion, _) = Sphinx.makePacket(sessionKey, publicKeys.take(1), payloads.take(1), associatedData)
    val Sphinx.ParsedPacket(payload, nextPacket, sharedSecret) = Sphinx.parsePacket(privKeys(0), associatedData, onion)
    assert(onion == BinaryData("0102eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f2836866194c4fbecf0a2a21892c45d9b5aa509a365d7d022ca4b0021183e62e8373f4a52c035fd754061ab9e0bc887beff8c95fdb878f7b3a7141453e5f8d22b6351810ae541ce499a09b4a9d9f80d1845c8960c85fc6d1a87bd24b2ce49922898e9353fa268086c00ae8b7f718405b72ad380cdbb38c85e02a00427eb4bdbda8fcd42b44708a9efde49cf753b75ebb389bf84d0bfbf58590e510e034572a01e409c30939e2e4a090ecc89c371820af54e06e4ad5495d4e58718385cca5414552e078fedf284fdc2cc5c070cba21a6a8d4b77525ddbc9a9fca9b2f29aac5783ee8badd709f81c73ff60556cf2ee623af073b5a84799acc1ca46b764f74b97068c7826cc0579794a540d7a55e49eac26a6930340132e946a983240b0cd1b732e305c1042f590c4b26f140fc1cab3ee6f620958e0979f85eddf586c410ce42e93a4d7c803ead45fc47cf4396d284632314d789e73cf3f534126c63fe244069d9e8a7c4f98e7e530fc588e648ef4e641364981b5377542d5e7a4aaab6d35f6df7d3a9d7ca715213599ee02c4dbea4dc78860febe1d29259c64b59b3333ffdaebbaff4e7b31c27a3791f6bf848a58df7c69bb2b1852d2ad357b9919ffdae570b27dc709fba087273d3a4de9e6a6be66db647fb6a8d1a503b3f481befb96745abf5cc4a6bba0f780d5c7759b9e303a2a6b17eb05b6e660f4c474959db183e1cae060e1639227ee0bca03978a238dc4352ed764da7d4f3ed5337f6d0376dff72615beeeeaaeef79ab93e4bcbf18cd8424eb2b6ad7f33d2b4ffd5ea08372e6ed1d984152df17e04c6f73540988d7dd979e020424a163c271151a255966be7edef42167b8facca633649739bab97572b485658cde409e5d4a0f653f1a5911141634e3d2b6079b19347df66f9820755fd517092dae62fb278b0bafcc7ad682f7921b3a455e0c6369988779e26f0458b31bffd7e4e5bfb31944e80f100b2553c3b616e75be18328dc430f6618d55cd7d0962bb916d26ed4b117c46fa29e0a112c02c36020b34a96762db628fa3490828ec2079962ad816ef20ea0bca78fb2b7f7aedd4c47e375e64294d151ff03083730336dea64934003a27730cc1c7dec5049ddba8188123dd191aa71390d43a49fb792a3da7082efa6cced73f00eccea18145fbc84925349f7b552314ab8ed4c491e392aed3b1f03eb79474c294b42e2eba1528da26450aa592cba7ea22e965c54dff0fd6fdfd6b52b9a0f5f762e27fb0e6c3cd326a1ca1c5973de9be881439f702830affeb0c034c18ac8d5c2f135c964bf69de50d6e99bde88e90321ba843d9753c8f83666105d25fafb1a11ea22d62ef6f1fc34ca4e60c35d69773a104d9a44728c08c20b6314327301a2c400a71e1424c12628cf9f4a67990ade8a2203b0edb96c6082d4673b7309cd52c4b32b02951db2f66c6c72bd6c7eac2b50b83830c75cdfc3d6e9c2b592c45ed5fa5f6ec0da85710b7e1562aea363e28665835791dc574d9a70b2e5e2b9973ab590d45b94d244fc"))
  }

  test("create 2-hop packet") {
    val Sphinx.OnionPacket(onion, _) = Sphinx.makePacket(sessionKey, publicKeys.take(2), payloads.take(2), associatedData)
    val Sphinx.ParsedPacket(payload, nextPacket, sharedSecret) = Sphinx.parsePacket(privKeys(0), associatedData, onion)
    val Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket)
    assert(onion == BinaryData("0102eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619a84f87d4cf02e4f0387456161c04017b7e5e3a72a4b0021183e62e8373f4a52c035fd754061ab9e0bc887beff8c95fdb878f7b3a71d07f2d00f9c77994251e861f162dde3da7bda32dc2d59599fb5b04a0dacb131d6b2f9e0c766dca91fc29ec8bf8e1c482940a72a5d3e5eeefdf9910c08a542e8c43f8111c9aed119dc3cf18e1abe4db1802a58b8e177752763920dca5e06ff30e3337ba365c0972bf5efb526ad11a3baf39843c89331ffb6a4d0ee8f0b95c59b5a33e3e0464ab184f10860bb582c6a5760ec04680f6b1bbde967158fda50d1f580c36634a5d7abe0185f776b89bce245e8777fb2b843979406056c302ccffd69a88ce6b2a52dc6f32272e25d91bf72f055667873fa9a7aaec4eb90d432ed1c40a921feb844886f413f4083f1b7de79bd72e236e671cc623df4b8a5c5cebe2656d1cf8d43685d8ceb3a2c0c99f69265c887e618633e00e172a38db887c8c4b368c681a154afcdf399d755c442babcf03d1ab7aa3d28622639ea9596e7fa7774348b9880d02459819633c5669d80b58a8c3761812930887d88a17fe57234242dc592720eb17d408c0db18b164613bc0c0f77cf36e8bd27a573d7f204d2eb6cf4a72675499a4c426b3c9c484f1c24f007bbe91b25b1d0133b912deb9b9c2f5fa087dcec26d9c4624c9575afd80ff6be481c55d864c4a85801adf2a499e0a51846d954eabcd50de52b0248360e3a54fbb4f7ced9cb7cbb5a987003c622fb269d1517eddc9142c3ffa87e0973173eff9d5f24105ca0b6d50acdef393c8ee70f6d221853e2fc265a9a2792cc7b61f26823ec2d3db1bd2287c5d665aa3143e1f1216fef8f7236801e860925567bdb2868ef80bdc9b5b83b1cdbf17c4cc740bbec1db724e9cb5ea2b33442e5ac1624236c3be33dc8c9d7bd5415bfeb72f4f44fbf9a88bd63e585ff5572dca1cce859defa6dcc115f1ec71d38cf1547e6dc07ffb0dc156b81acadd91a72386a4b809f05999ab277204e115f7ca54245774338ce027f3e11f24561412e742e64854d6df45a1dc109b0bfa0ac7bfb70ffb93801099f6262e807d1cd8526f64a6683a3d624fcbd5dfdc23599e9015f84926bc66fa29c9003308e58500da4cd52b89f4d287b1e03838b13ce9d9b16a3c3e560937dcb3aa7e02b6b628297ca4ec4ee5181dd987908a9f38966c8eece3024476273f9ab222825ed1523ad6624c213ab83124590a32ad4abb63b2bace9563c559cf7ab5d5320ca199890265c9f0495b4714f24438c16e12b55bae6059aeab65ef87dec58ebfcfb81ca8413f4fe3dff01037f48e68b7d5bc745f4873e054af9645e40b9dbc042b312c5949e876faf22da920a546043644d688356f185b624df2908e344765ea0e4036db041532983496ec34a0865150d71319c89bc86a1ff216f87ce478dd6b264990eceea7eb135eede449d88afc87df0c64dbf40bbdaa817ce0fd5a7eb7b0b0053b9cc01f2a16b63ef5bfb8baf1c6c3feada8a0866f197e60bb43eac5b59fc9d55adcda2e"))
  }

  test("last node replies with an error message") {
    // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

    // origin build the onion packet
    val OnionPacket(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

    // each node parses and forwards the packet
    // node #0
    val ParsedPacket(payload0, packet1, sharedSecret0) = parsePacket(privKeys(0), associatedData, packet)
    // node #1
    val ParsedPacket(payload1, packet2, sharedSecret1) = parsePacket(privKeys(1), associatedData, packet1)
    // node #2
    val ParsedPacket(payload2, packet3, sharedSecret2) = parsePacket(privKeys(2), associatedData, packet2)
    // node #3
    val ParsedPacket(payload3, packet4, sharedSecret3) = parsePacket(privKeys(3), associatedData, packet3)
    // node #4
    val ParsedPacket(payload4, packet5, sharedSecret4) = parsePacket(privKeys(4), associatedData, packet4)
    assert(Packet.isLastPacket(packet5))

    // node #4 want to reply with an error message
    val error = createErrorPacket(sharedSecret4, TemporaryNodeFailure)
    assert(error == BinaryData("69b1e5a3e05a7b5478e6529cd1749fdd8c66da6ffa31d2eb0f2dbbf4394713c6a8c9b16ab5f12fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9"))
    // error sent back to 3, 2, 1 and 0
    val error1 = forwardErrorPacket(error, sharedSecret3)
    assert(error1 == BinaryData("08cd44478211b8a4370ab1368b5ffe8c9c92fb8398715ffdcba31d358e842c21a0839ab361940011585323930fa5b9fae0c85770a2279ff59ec427ad1bbff9001c0cd1497004bd2a0f68b50704cf6d6a4bf3c8b6a0833399a24b3456961ba00736785112594f65b6b2d44d9f5ea4e49b5e1ec2af978cbe31c67114440ac51a62081df0ed46d4a3df295da0b0fe25c0115019f03f15ec86fa"))

    val error2 = forwardErrorPacket(error1, sharedSecret2)
    assert(error2 == BinaryData("6984b0ccd86f37995857363df13670acd064bfd132c517b23a7dfb4470e7d16aff98e25d41d3dfb7466e74f81b3e545563cdd8f5524dae873de61d7bdfccd496af2584930d2b566b4f8d3881f8c043df92224f38cf094cfc09d92655989531524593ec6d6caec1863bdfaa79229b5020acc034cd6deeea1021c50586947b9b8e6faa83b81fbfa6133c0af5d6b07c017f7158fa94f0d206ba"))

    val error3 = forwardErrorPacket(error2, sharedSecret1)
    assert(error3 == BinaryData("669478a3ddf9ba4049df8fa51f73ac712b9c20389b5fb185663f16115045868ab7dd8db956128dae8857add94e6702fb4c3a4de22e2e669e1ed926b04447fc73034bb730f4932acd62727b75348a648a1128744657ca6a4e713b9b646c3ca66cac02cdab44dd3439890ef3aaf61708714f7375349b8da541b2548d452d84de7084bb95b3ac2345201d624d31f4d52078aa0fa05a88b4e202"))

    val error4 = forwardErrorPacket(error3, sharedSecret0)
    assert(error4 == BinaryData("500d8596f76d3045bfdbf99914b98519fe76ea139a47d1ab34da8730a01515e63a04819d896f45610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5"))


    // origin parses error packet and can see that it comes from node #4
    val Some(ErrorPacket(pubkey, failure)) = parseErrorPacket(error4, sharedSecrets)
    assert(pubkey == publicKeys(4))
    assert(failure == TemporaryNodeFailure)
  }

  test("intermediate node replies with an error message") {
    // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

    // origin build the onion packet
    val OnionPacket(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

    // each node parses and forwards the packet
    // node #0
    val ParsedPacket(payload0, packet1, sharedSecret0) = parsePacket(privKeys(0), associatedData, packet)
    // node #1
    val ParsedPacket(payload1, packet2, sharedSecret1) = parsePacket(privKeys(1), associatedData, packet1)
    // node #2
    val ParsedPacket(payload2, packet3, sharedSecret2) = parsePacket(privKeys(2), associatedData, packet2)

    // node #2 want to reply with an error message
    val error = createErrorPacket(sharedSecret2, InvalidRealm)

    // error sent back to 1 and 0
    val error1 = forwardErrorPacket(error, sharedSecret1)
    val error2 = forwardErrorPacket(error1, sharedSecret0)

    // origin parses error packet and can see that it comes from node #2
    val Some(ErrorPacket(pubkey, failure)) = parseErrorPacket(error2, sharedSecrets)
    assert(pubkey == publicKeys(2))
    assert(failure == InvalidRealm)
  }
}

object SphinxSpec {
  val privKeys = Seq(
    PrivateKey(BinaryData("0x4141414141414141414141414141414141414141414141414141414141414141"), compressed = true),
    PrivateKey(BinaryData("0x4242424242424242424242424242424242424242424242424242424242424242"), compressed = true),
    PrivateKey(BinaryData("0x4343434343434343434343434343434343434343434343434343434343434343"), compressed = true),
    PrivateKey(BinaryData("0x4444444444444444444444444444444444444444444444444444444444444444"), compressed = true),
    PrivateKey(BinaryData("0x4545454545454545454545454545454545454545454545454545454545454545"), compressed = true)
  )
  val publicKeys = privKeys.map(_.publicKey)
  assert(publicKeys == Seq(
    PublicKey(BinaryData("0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619")),
    PublicKey(BinaryData("0x0324653eac434488002cc06bbfb7f10fe18991e35f9fe4302dbea6d2353dc0ab1c")),
    PublicKey(BinaryData("0x027f31ebc5462c1fdce1b737ecff52d37d75dea43ce11c74d25aa297165faa2007")),
    PublicKey(BinaryData("0x032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991")),
    PublicKey(BinaryData("0x02edabbd16b41c8371b92ef2f04c1185b4f03b6dcd52ba9b78d9d7c89c8f221145"))
  ))

  val sessionKey: PrivateKey = PrivateKey(BinaryData("0x4141414141414141414141414141414141414141414141414141414141414141"), compressed = true)
  val payloads = Seq(
    BinaryData("0x414141414141414141414141414141414100000000000000000000000000000000"),
    BinaryData("0x414141414141414141414141414141414100000000000000000000000000000000"),
    BinaryData("0x414141414141414141414141414141414100000000000000000000000000000000"),
    BinaryData("0x414141414141414141414141414141414100000000000000000000000000000000"),
    BinaryData("0x414141414141414141414141414141414100000000000000000000000000000000"))

  val associatedData: BinaryData = "0x4242424242424242424242424242424242424242424242424242424242424242"
}
