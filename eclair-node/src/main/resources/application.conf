eclair {
    enable-kamon = false
}

akka {
  actor.provider = local // set to cluster when using eclair-front (must also enable the distributed pubsub extension below)
  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 25520

      untrusted-mode = on
      trusted-selection-paths = [
        "/user/*/switchboard",
        "/user/*/router",
        "/system/cluster/core/daemon",
        "/system/cluster/heartbeatReceiver",
        "/system/distributedPubSubMediator",
        "/system/clusterReceptionist/replicator"
      ]
    }
    deployment {
      enable-whitelist = on
      whitelist = [] // no remote deployment
    }
  }
  cluster.roles = [backend]
  coordinated-shutdown.terminate-actor-system = on
  coordinated-shutdown.exit-jvm = on
  // It is recommended to load the extension when the actor system is started by defining it in akka.extensions
  // configuration property. Otherwise it will be activated when first used and then it takes a while for it to be populated.
  // Uncomment the line below in cluster mode
  #extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}

kamon.instrumentation.akka {
  filters {
    actors {
      # Decides which actors generate Spans for the messages they process, given that there is already an ongoing trace
      # in the Context of the processed message (i.e. there is a Sampled Span in the Context).
      trace {
        includes = [ ]
        excludes = [ "**" ] # we don't want automatically generated spans; we're not using them
      }
    }
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s
  loglevel = "DEBUG" # akka doc: You can enable DEBUG level for akka.loglevel and control the actual level in the SLF4J backend without any significant overhead, also for production.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}