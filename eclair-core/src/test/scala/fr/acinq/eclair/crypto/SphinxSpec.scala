/*
 * Copyright 2019 ACINQ SAS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fr.acinq.eclair.crypto

import fr.acinq.bitcoin.ByteVector32
import fr.acinq.bitcoin.Crypto.{PrivateKey, PublicKey}
import fr.acinq.eclair.wire._
import org.scalatest.FunSuite
import scodec.bits._

import scala.util.Success

/**
  * Created by fabrice on 10/01/17.
  */

class SphinxSpec extends FunSuite {

  import Sphinx._
  import SphinxSpec._

  /*
  hop_shared_secret[0] = 0x53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66
  hop_blinding_factor[0] = 0x2ec2e5da605776054187180343287683aa6a51b4b1c04d6dd49c45d8cffb3c36
  hop_ephemeral_pubkey[0] = 0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619

  hop_shared_secret[1] = 0xa6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae
  hop_blinding_factor[1] = 0xbf66c28bc22e598cfd574a1931a2bafbca09163df2261e6d0056b2610dab938f
  hop_ephemeral_pubkey[1] = 0x028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2

  hop_shared_secret[2] = 0x3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc
  hop_blinding_factor[2] = 0xa1f2dadd184eb1627049673f18c6325814384facdee5bfd935d9cb031a1698a5
  hop_ephemeral_pubkey[2] = 0x03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0

  hop_shared_secret[3] = 0x21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d
  hop_blinding_factor[3] = 0x7cfe0b699f35525029ae0fa437c69d0f20f7ed4e3916133f9cacbb13c82ff262
  hop_ephemeral_pubkey[3] = 0x031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595

  hop_shared_secret[4] = 0xb5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328
  hop_blinding_factor[4] = 0xc96e00dddaf57e7edcd4fb5954be5b65b09f17cb6d20651b4e90315be5779205
  hop_ephemeral_pubkey[4] = 0x03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4
  */
  test("generate ephemeral keys and secrets") {
    val (ephkeys, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    assert(ephkeys(0) == PublicKey(hex"02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619"))
    assert(sharedsecrets(0) == ByteVector32(hex"53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66"))
    assert(ephkeys(1) == PublicKey(hex"028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2"))
    assert(sharedsecrets(1) == ByteVector32(hex"a6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae"))
    assert(ephkeys(2) == PublicKey(hex"03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0"))
    assert(sharedsecrets(2) == ByteVector32(hex"3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc"))
    assert(ephkeys(3) == PublicKey(hex"031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595"))
    assert(sharedsecrets(3) == ByteVector32(hex"21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d"))
    assert(ephkeys(4) == PublicKey(hex"03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4"))
    assert(sharedsecrets(4) == ByteVector32(hex"b5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328"))
  }

  /*
  filler = 0xc6b008cf6414ed6e4c42c291eb505e9f22f5fe7d0ecdd15a833f4d016ac974d33adc6ea3293e20859e87ebfb937ba406abd025d14af692b12e9c9c2adbe307a679779259676211c071e614fdb386d1ff02db223a5b2fae03df68d321c7b29f7c7240edd3fa1b7cb6903f89dc01abf41b2eb0b49b6b8d73bb0774b58204c0d0e96d3cce45ad75406be0bc009e327b3e712a4bd178609c00b41da2daf8a4b0e1319f07a492ab4efb056f0f599f75e6dc7e0d10ce1cf59088ab6e873de377343880f7a24f0e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac
   */
  test("generate single-frame filler") {
    val (_, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    val filler = generateFiller("rho", sharedsecrets.dropRight(1), referenceSingleFramePayloads.dropRight(1))
    assert(filler == hex"c6b008cf6414ed6e4c42c291eb505e9f22f5fe7d0ecdd15a833f4d016ac974d33adc6ea3293e20859e87ebfb937ba406abd025d14af692b12e9c9c2adbe307a679779259676211c071e614fdb386d1ff02db223a5b2fae03df68d321c7b29f7c7240edd3fa1b7cb6903f89dc01abf41b2eb0b49b6b8d73bb0774b58204c0d0e96d3cce45ad75406be0bc009e327b3e712a4bd178609c00b41da2daf8a4b0e1319f07a492ab4efb056f0f599f75e6dc7e0d10ce1cf59088ab6e873de377343880f7a24f0e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac")
  }

  /*
  filler = 0xec46532066fd5c8296a1b3ba75fe06c6f8d3c61b6d177512f0ae5a987030ea69a21af42cbc0989a13a1a0721fe7877a3fc7931c3136ad5b2c078600d8867c33e29ef61f91b4fc24bf0405b46efd70aa67c3dfbb63ef0979bdb1536eb103dc15ec63533560e081f45be5c7f3fccc0e50ca9ab4d8a93f9b444779993b1b14eeebdac9bfb0da1641c36a72dd23ccedbaa30f4745c83d6252b18cac443264854eb31904aa1bb140a88c2de41b333eba32efcacf7647316a136e32a893228b2e407456c26ef4b0b4bc24615b73988bbb967e3094d1d20ee19bcee838c1ff8e0cb268f86e22df2fa87ccf96227d0c5088bd6e8fa307f98634f0e96b91eacc86d88eb29a5eed0a0f633ff83ded2cee3ca35079cf0a16fb2303326d37804d20bcdaa1f9283a5e63c936207ddd1c25c712cb8a5f8fd050fb357db9e766b0d60812ced013a312ea325d1e3cd3e966bc8bd87ae3fc141ad89e6c7b61170191567bed291266f4e89225d5e6db93b9cf602674061df818bff34bc99772f96107ccc3839a9f879131299e5b56e3abe0bf55a30771807640ff11f1f9d07dcd6112f6e4c7ba3008ef4b070284524cad49cf9f9d636a7964318742158aa60fb3decd1f353c759beff1194c0fe00d3770e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac
  */
  test("generate multi-frame filler") {
    val (_, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    val filler = generateFiller("rho", sharedsecrets.dropRight(1), referenceMultiFramePayloads.dropRight(1))
    assert(filler == hex"ec46532066fd5c8296a1b3ba75fe06c6f8d3c61b6d177512f0ae5a987030ea69a21af42cbc0989a13a1a0721fe7877a3fc7931c3136ad5b2c078600d8867c33e29ef61f91b4fc24bf0405b46efd70aa67c3dfbb63ef0979bdb1536eb103dc15ec63533560e081f45be5c7f3fccc0e50ca9ab4d8a93f9b444779993b1b14eeebdac9bfb0da1641c36a72dd23ccedbaa30f4745c83d6252b18cac443264854eb31904aa1bb140a88c2de41b333eba32efcacf7647316a136e32a893228b2e407456c26ef4b0b4bc24615b73988bbb967e3094d1d20ee19bcee838c1ff8e0cb268f86e22df2fa87ccf96227d0c5088bd6e8fa307f98634f0e96b91eacc86d88eb29a5eed0a0f633ff83ded2cee3ca35079cf0a16fb2303326d37804d20bcdaa1f9283a5e63c936207ddd1c25c712cb8a5f8fd050fb357db9e766b0d60812ced013a312ea325d1e3cd3e966bc8bd87ae3fc141ad89e6c7b61170191567bed291266f4e89225d5e6db93b9cf602674061df818bff34bc99772f96107ccc3839a9f879131299e5b56e3abe0bf55a30771807640ff11f1f9d07dcd6112f6e4c7ba3008ef4b070284524cad49cf9f9d636a7964318742158aa60fb3decd1f353c759beff1194c0fe00d3770e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac")
  }

  test("create single-frame packet (reference test vector)") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, referenceSingleFramePayloads, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619e5f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a71da571226458c510bbadd1276f045c21c520a07d35da256ef75b4367962437b0dd10f7d61ab590531cf08000178a333a347f8b4072e216400406bdf3bf038659793a86cae5f52d32f3438527b47a1cfc54285a8afec3a4c9f3323db0c946f5d4cb2ce721caad69320c3a469a202f3e468c67eaf7a7cda226d0fd32f7b48084dca885d15222e60826d5d971f64172d98e0760154400958f00e86697aa1aa9d41bee8119a1ec866abe044a9ad635778ba61fc0776dc832b39451bd5d35072d2269cf9b040d6ba38b54ec35f81d7fc67678c3be47274f3c4cc472aff005c3469eb3bc140769ed4c7f0218ff8c6c7dd7221d189c65b3b9aaa71a01484b122846c7c7b57e02e679ea8469b70e14fe4f70fee4d87b910cf144be6fe48eef24da475c0b0bcc6565ae82cd3f4e3b24c76eaa5616c6111343306ab35c1fe5ca4a77c0e314ed7dba39d6f1e0de791719c241a939cc493bea2bae1c1e932679ea94d29084278513c77b899cc98059d06a27d171b0dbdf6bee13ddc4fc17a0c4d2827d488436b57baa167544138ca2e64a11b43ac8a06cd0c2fba2d4d900ed2d9205305e2d7383cc98dacb078133de5f6fb6bed2ef26ba92cea28aafc3b9948dd9ae5559e8bd6920b8cea462aa445ca6a95e0e7ba52961b181c79e73bd581821df2b10173727a810c92b83b5ba4a0403eb710d2ca10689a35bec6c3a708e9e92f7d78ff3c5d9989574b00c6736f84c199256e76e19e78f0c98a9d580b4a658c84fc8f2096c2fbea8f5f8c59d0fdacb3be2802ef802abbecb3aba4acaac69a0e965abd8981e9896b1f6ef9d60f7a164b371af869fd0e48073742825e9434fc54da837e120266d53302954843538ea7c6c3dbfb4ff3b2fdbe244437f2a153ccf7bdb4c92aa08102d4f3cff2ae5ef86fab4653595e6a5837fa2f3e29f27a9cde5966843fb847a4a61f1e76c281fe8bb2b0a181d096100db5a1a5ce7a910238251a43ca556712eaadea167fb4d7d75825e440f3ecd782036d7574df8bceacb397abefc5f5254d2722215c53ff54af8299aaaad642c6d72a14d27882d9bbd539e1cc7a527526ba89b8c037ad09120e98ab042d3e8652b31ae0e478516bfaf88efca9f3676ffe99d2819dcaeb7610a626695f53117665d267d3f7abebd6bbd6733f645c72c389f03855bdf1e4b8075b516569b118233a0f0971d24b83113c0b096f5216a207ca99a7cddc81c130923fe3d91e7508c9ac5f2e914ff5dccab9e558566fa14efb34ac98d878580814b94b73acbfde9072f30b881f7f0fff42d4045d1ace6322d86a97d164aa84d93a60498065cc7c20e636f5862dc81531a88c60305a2e59a985be327a6902e4bed986dbf4a0b50c217af0ea7fdf9ab37f9ea1a1aaa72f54cf40154ea9b269f1a7c09f9f43245109431a175d50e2db0132337baa0ef97eed0fcf20489da36b79a1172faccc2f7ded7c60e00694282d93359c4682135642bc81f433574aa8ef0c97b4ade7ca372c5ffc23c7eddd839bab4e0f14d6df15c9dbeab176bec8b5701cf054eb3072f6dadc98f88819042bf10c407516ee58bce33fbe3b3d86a54255e577db4598e30a135361528c101683a5fcde7e8ba53f3456254be8f45fe3a56120ae96ea3773631fcb3873aa3abd91bcff00bd38bd43697a2e789e00da6077482e7b1b1a677b5afae4c54e6cbdf7377b694eb7d7a5b913476a5be923322d3de06060fd5e819635232a2cf4f0731da13b8546d1d6d4f8d75b9fce6c2341a71b0ea6f780df54bfdb0dd5cd9855179f602f917265f21f9190c70217774a6fbaaa7d63ad64199f4664813b955cff954949076dcf")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == referenceSingleFramePayloads)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"9b122c79c8aee73ea2cdbc22eca15bbcc9409a4cdd73d2b3fcd4fe26a492d376"))
    assert(packets(1).hmac == ByteVector32(hex"548e58057ab0a0e6c2d8ad8e855d89f9224279a5652895ea14f60bffb81590eb"))
    assert(packets(2).hmac == ByteVector32(hex"0daed5f832ef34ea8d0d2cc0699134287a2739c77152d9edc8fe5ccce7ec838f"))
    assert(packets(3).hmac == ByteVector32(hex"62cc962876e734e089e79eda497077fb411fac5f36afd43329040ecd1e16c6d9"))
    // this means that node #4 is the last node
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create multi-frame packet (reference test vector)") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, referenceMultiFramePayloads, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619e5f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a7188818bd40634aa515d2a9bc473fbcc3a3896391dbae9ed22b19f037fb2c004e4d10f7d61ab590531cf08000178a333a347f8b4072e216400406bdf3bf038659793edb487b9ae0c8d87ab577dc51e030fc6086c7f5fc26ae7c5735a02c03a64224aee701faad79527c7a161ab08f8e865c873bf6b6ecb367819c43762521351d7964238add9bb94a74f5aba4011c6dd5c6c061e5602acb56969b38a66cc6a9a6f55a1ef8201831b403cc1e6588413b0aecd81b24ee0533a4955c677781485b08291c98001fc08067dc124facc49d211b93b727387b0b3ba423ece2aa6b6ed0ccf5503cbb06853918dc74342166696880645cd465b43f7e2b02676153fb278b85940189216e8bd70d7326363e878ada2dfae7f1b305058a4bffe75cbf5036989f4aaa30d8297cadc148bc603837fc7fe371ab7e466a3ec486d1d6e3e1dd82019bc01882d586514b4e5c9e7a5dd7754f48f7702e99c9ac1b84b811b944f6bb22c58f0bb7a538d7123f1c5b88b03a43f4924512cfc84555da326847824954af989e62f315afc855084a07d3400b04278d5a173bb3a95f7b0832c43c829f57e7469ba63a89cace2a7c15121108ffd40b0c804ab8f6fab44e110bee5e2f01ec9575adc53538582afd6ebe48d6aff8a0eac698d1a1f157e9999f3f3e424d46fb3ffefe420efeac1f7333b92b4eed93f8c32b2b436514375d7f84073f8606efdd5c4a452378a47f50a926675faf980ecfecba991c98351c5a36a27942972e26c5205ad2f5fbc1fe57496b2bcd046fffec92f960b1dc2e57f94408ba34785f9fd5af9c1f6f7368f09510f20e4eef76c144e33c8e312a9a5333fa2ec6615da4e3d79252cc1d0669ef1e8054a0238b92d05aacf00299604f830f6532e01da0518964567accf676e802096fd3adb1ea7af60094b3d82141b9cf1007b13a8f6565d691397fe6eda13fa3ee08bf0a990c3c145a440d7f726bfddbcdb8d065439e124a23f289a13d22320d55b1cddbc661f6587eb844598fa6bc2f2df6257956d142fea702e108bbbe1267d5eecb30e0e9bc33f7dc16853144d70c8d59c8b7c93c999e6b308c7b5092cd3f6bf4c496882639156b261f1f4039a40d0e7ac4717a2e13259a08126d17f48618c57b8005bcc98aa48c6bcd6519c1c37b0bc2a8f953745f7f0b0604c3b91b8905140e6b207517cbaebaac87489925a6d56e0eb5e47178e62e8d6614229ed2e3d831c7f278dfe89dac6ad3bcb54c6df85fc9d757f7168f0006f151a38e916c11abeb93ee3931c583e9afefc26910ae1b95bfe019855ba99a09bf1d84ec7be8783000c172802f63edba24daafda69448a3acf425208c8bd3ae944882e35c78c2610bd0536397bff7c6f3a582a5907bfe09e2b791a6e87380c2ca1d3ca449ab836c6769c1727f051ee02c967f891cb3ad7161c4942e9eb5dac560effd3d913afc2240b50077cb907064291e9792c9a3c0c0f881c5be0b10592263a87d418086e2fd7e050d502a423febd87a0488efb95b25c312b6e46638cd295c944bcf25f5b6bbf798af7fcfecaf8186f516aeb4b50a74439ebad8564ea680d568d948a5ee23dba9f68a867e033ee62eb5268f934ea197729d60e0ebf3c5997cdade0d0cb78cb37dc1555956c0821384fa6760409133fa45e127a8c54c09c99e0b684654530df5686c676708f5640d9d4f31f41dcd20c1a68bd7ffe98b2a7cc0f9341169b5bf94aa611c21a19e76d29a43cefd20119e3ccf04805ba3d95a432f497487b3d64bec0597b20eaf70ba26010691c84fbfb9585f4796ec5e8c4794baedbfca9e8d6f8ef17eb27758c96a6a6d9e62b47c7f0e06")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == referenceMultiFramePayloads)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"c9c4b58b8b161c64453a35906f1f559aa3dca4823a38697e38ffcb207411ac9f"))
    assert(packets(1).hmac == ByteVector32(hex"115671e3866f025551ddab0c3a91437daf86a9169d0eed1c447705abed2cfe13"))
    assert(packets(2).hmac == ByteVector32(hex"fa8ed50911736b2a4c13c832f9660993440bbc909de4c1c7d3b404820f79d21f"))
    assert(packets(3).hmac == ByteVector32(hex"b8e37ddbe2ffdcf8b77c9567331b28b8e77ab5d4fe8caca1091809f36d01f575"))
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create multi-frame packet filling onion") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, multiFramePayloadsFull, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619c4f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a7141453e5f8d22b6351810ae541ce499a09b4a9d9f80d1845c8960c85fc6d1a87bd24b2ce49922898e9353fa268086c00ae8b7f718405b72ad380cdbb38c85e02a00427eb4bdbda8fcd42b44708a9efde49cf753b75ebb389bf84d0bfbf58590e510e034572a01e409c30939e2e4a090ecc89c371820af54e06e4ad5495d4e58718385cca5414552e078fedf284fdc2cc5c070cba21a6a8d4b77525ddbc9a9fca9b2f29aac5783ee8badd709f81c73ff60556cf2ee623af073b5a84799acc1ca46b764f74b97068c7826cc0579794a540d7a55e49eac26a6930340132e946a983240b0cd1b732e305c1042f590c4b26f140fc1cab3ee6f620958e0979f85eddf586c410ce4fcdbbfcca2995dccb71d6ccf759220bbbf52b19b0135308490c476816a316a3dbfcacbe96df37b4a7cb6b3b88dba165efe681b8fcb5c72febc91b133c6c1a15a5dd2b7ce8a23cf43225931b5967094f4f1c9c88eb8e864a5ac0f8276bc7036f2b36784b2ab4d0435336a8445b64cc7af1b703c8c94b1a83411d0234b1fd3fff0b0dc7992c9f5ab8fc8395d3cd70c5dd6ef9b2408d1b8608f6fff191c2437e8694296e3224b92e3b7a872877b31e5d2dd70ffaa9e8fd70ea552d85fb27289f91e1772794156c87b81bb2c9a470d364945fa1c96816dbc0f6440d3071a4bfc8596012ef384f20776d7384ef196db73b3aac192bf890666f0d5551a4551421558d87bf90218159b96bd0c4aa2acb6755e5db85e5fd41810434f3dd6680be8636190e249f3b97b1f65365922bbe2339bf4d815dc7cb0b588f8d0ef1d5017cff1501135d78d0996e5c122ce52cd6b49b4aba6222f4ba93c23643be48ddacf552221561720a8dc6b71ea07c65e869179c71ebb0ff002ed8a53ce05e0e6024addbbf3118f34319d75e4850d5e17fbce98ed8458b9e5ab996e00ec697d3752f5a1d6a3ad691d8015f78b10afb9b62bd92e0dbdfb2ed7783771d61b86d8bcb8e167e74919b0f61fd1c63ed6153abeb3d90b8bb6d5932d559dda555c9e0482cf3c953eb69f4c1a58e4dcd31361958666c2fdbe30bc281684c7421b1d23635c7e9176651c2d91db9a07f50dcaa914f1f50e153dafd00381bc868bfbdf84401ad5a22516a91653808d8942190441e600c60ee23358cf56f2e5007314df2f4700c24b27dae11cb45817459a566f582ab3d899d48fa61e8c76526c84994be0281bb3f20494b9bd8973e4169817250803d23a3fdd97f0a3c3806eb17177d4f07ec4c2d30fb5318b9feb9b055c8571fb7d0dd1782b9eb1b0155564b7fa21998c9c696b5979c81041818c2e774395141ef2283aea4353397d90dd37923aefcadda3a66785cdb335ace25d53a250ab57ff7cc6c43034d8afef7d1fdbb07ca85639586eb939c4c96ee38ca2c8dd5c14e03ddef13b25cdd2af2486f02f73de04571b402f6ead23cf3b27efaa0f3b88df280c77acc16ddd5359b06e0e2aef47b98f01a86df40b4974db1c36466ca7208d56e9088709dc499b930ec497f505060501391c1c396121efc0fa152ba6967b551fe13a0ae135a7bf8e347c52858d66bc1a07c379ec7a34654c3afe8443e30ea344c27af96a5d1ff1b94d9744fa1f273320f38c4a9bfffa81e05ae0dbbd2a232e57f4fca93fe588ebcd39bd334a4d26b7223dfeb10c0f8b7d42d2dfbe5264073752ab8e63f5fe65d627bfff286c4bf429cad13a17bc21412038ccddfdb956dfd1bef80d2adc04700bf50adb875f00c4e133e6c6bc88ae152bc2eb59450ce6f2f27522ba6cfa43847495019b0282f6ffdb3efbbe10a70f89ea311652670932218d70a9335163f25c7c45")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == multiFramePayloadsFull)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"d2481b1b6a9ab718e8d9103b4cff08fd8d63fce39f46ffbbc385504755d32e3b"))
    assert(packets(1).hmac == ByteVector32(hex"92ee624aadb2a92e0e4645b1e7c63587f593c97580e6d865164b93e26a4ea4a1"))
    assert(packets(2).hmac == ByteVector32(hex"3282b10831d5591893c491d8bb25a030707d7e6ed97df32e3dc0b8608f3e06bb"))
    assert(packets(3).hmac == ByteVector32(hex"34fa139c3dcbb0cad1f207d9d240d774945384c1feac82eb064810c3cb098d3b"))
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create 20-frames 1-hop packet") {
    val Sphinx.PacketAndSecrets(onion, _) = Sphinx.makePacket(sessionKey, publicKeys.take(1), maxFramesOneHopPayload, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f2836866197cb3011280e52d8070f7a62f005cd4570558fba2feca39adba8b1d99c5cd39783303077c1dcf60f4775a52ec165ea6dbe2d908dfddc293c61ecb228a1d8493ea3990096ea6db60cbccd111b864c2c48248aaf5b55a021930ef7a4e99f1cec7a26842003cf6ffffeabe96690632c8dcbfa6deb511f51cf97ad9ba0f49b9b7c7d2a752a276156843a64b814b7ba0a6e2d2ae8ade755a62ed16a22c08970b1f0c1a33c1c78ee7030710a23abc9d6a0d9e6e87823289e05828cf0935101f998bebbeebf0b0d8ee15c1acc9ef954bba5e31bd22172eb0ac2078b231f7ea05dbee838804f526b509d544ce3a648e473b3b08164f3817a6dcee64e4d14102516cd628da7002f28f59316c721e5200b7d286f02d564d8388f1ac2d204b1aa2d5ddc7af9d1a2e034ea66cd1e6958a41a8961d863eb67b2f6a0470730f3adc318d7d110364847da00644dfdcc83e0ddaa5a772be1acc26ccb6a403740bc3f775370097a5e6e8e92f77b49d3f78df3ee5576377dbac408699a80f85ca22bcfc5f6b67de26f7d97171bd98a9f8bd0c3973803875d3b4fdc6c81a9d3e2bf9695a1090ef7739db5bbd98a732f03f854bb9e2c5657f780faba4e4fc2499263df4ea93e741f1b6c3fcb9d43618fd1e86e4f9e2b5c2978537d9dc7278682955a947f4a422b68636d7dff3c1a388a222a321d065ac498841d5c861cf86776c9526983f0d7c97713d2f41349db56457fcaca8ecad3be9d1a6fefd5a8fc666a9692895b17f690dbf1ce2c130a4af5fda03109d55a20e2d31164bca959fd5dc404666e32180335758671b24fc3c9cb66325fab88ee47126d57bf8fb3730f6c727ce9c02dc1f084d277d581b53565476a190f445d95b763fb42dda62371d97554b6fec20b965c949ed8e3894c0b5d05978071c4e212bdac53ba02d461af159bd95a6a7fdf15b06aa4d5249671181f454a519a3c16a9e014d245a971e9592d469fb54902c96f355862de0dc48536e40812262f108d4346ff46ab876d2c0cc8045db20efc32cb04ce2fee5cdf0f5b5ec9f0e05a137a400d69313bd414a7572712fa826d10241e035728e5e3fae120b9ff8c3ca507f93d3e8337b4f01e6ddf5d0e19832c0ade48eaf31b24c8ea85a561dfec6d0110bb5f7107308faaf0e0b5c7b68af795d41a93b050e6b0900a0a9e310cfe02612e81b6ef83ce06cd41e169db2bf2d9d94f769d84d1d346c65b94c2e7e9164e3885e1b319cd9aac301dd326a72edbcf2827683c88a9780b3778b26fd2b9c1294abd99ccaab4163f8c67fd5118aba7424521f67b8b95853a860946cb4b3be76880c22811f2b3578520fd80630ce4a80492156703143e08642e55c566683646a8ddd0825db489cc86041f2affb2e22c0962579314b8f1086f16940d75ff0b42e2e30ff2e3cee6912fa7a72851e9d8194ab80f7d0861c97b81d2c8298c733493c5720ece121a0c427c115d39e150fd832f0a7a0fbd578f7d29619d69006be0014d02e1817f25e92eee05da7bb8b452b5df264928725caf27ee1b2cff2e9fbbb434bcf9c6c8642772afe7ee03637bdc4e58948e99ba7512e1fa2269325361a0967626652d9f2624699e3b8fddcc0359c4b3848f29ecd2c64be96e0cdfb903e96e0b4f37c652c901be1dc5e3c22b1816e1e8686bb299bc3af891c6e34e7558f80c7e86ee73393a19621ae952308a0659d55ed360772199584238d3ff827c9489eb12942c6f5081de64aa030b54135488777517632d3508796a6bcda3c4e65f4320364d4b76971661e60d5379817456b938268ee4e7a282e4a60b25dbb28ea8877a5069f819e5d1d31d9140bbc627ff3cc71285778b5a49c2c741b09b61c113eed6dd067d430d9c64f8918f0bc7ee2c0")

    val Success(Sphinx.ParsedPacket(payload, nextPacket, _)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    assert(payload == maxFramesOneHopPayload.head)
    assert(nextPacket.hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("last node replies with an error message") {
    for (payloads <- Seq(referenceSingleFramePayloads, referenceMultiFramePayloads, multiFramePayloadsFull)) {
      // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

      // origin build the onion packet
      val PacketAndSecrets(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

      // each node parses and forwards the packet
      // node #0
      val Success(ParsedPacket(_, packet1, sharedSecret0)) = parsePacket(privKeys(0), associatedData, packet.serialize)
      // node #1
      val Success(ParsedPacket(_, packet2, sharedSecret1)) = parsePacket(privKeys(1), associatedData, packet1.serialize)
      // node #2
      val Success(ParsedPacket(_, packet3, sharedSecret2)) = parsePacket(privKeys(2), associatedData, packet2.serialize)
      // node #3
      val Success(ParsedPacket(_, packet4, sharedSecret3)) = parsePacket(privKeys(3), associatedData, packet3.serialize)
      // node #4
      val Success(ParsedPacket(_, packet5, sharedSecret4)) = parsePacket(privKeys(4), associatedData, packet4.serialize)
      assert(packet5.isLastPacket)

      // node #4 want to reply with an error message
      val error = createErrorPacket(sharedSecret4, TemporaryNodeFailure)
      assert(error == hex"a5e6bd0c74cb347f10cce367f949098f2457d14c046fd8a22cb96efb30b0fdcda8cb9168b50f2fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c243fb4847e004f5256b3e90e2edde4c9fb3082ddfe4d1e734cacd96ef0706bf63c9984e22dc98851bcccd1c3494351feb458c9c6af41c0044bea3c47552b1d992ae542b17a2d0bba1a096c78d169034ecb55b6e3a7263c26017f033031228833c1daefc0dedb8cf7c3e37c9c37ebfe42f3225c326e8bcfd338804c145b16e34e4")
      //    assert(error == hex"69b1e5a3e05a7b5478e6529cd1749fdd8c66da6f6db42078ff8497ac4e117e91a8cb9168b58f2fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c2")
      // error sent back to 3, 2, 1 and 0
      val error1 = forwardErrorPacket(error, sharedSecret3)
      assert(error1 == hex"c49a1ce81680f78f5f2000cda36268de34a3f0a0662f55b4e837c83a8773c22aa081bab1616a0011585323930fa5b9fae0c85770a2279ff59ec427ad1bbff9001c0cd1497004bd2a0f68b50704cf6d6a4bf3c8b6a0833399a24b3456961ba00736785112594f65b6b2d44d9f5ea4e49b5e1ec2af978cbe31c67114440ac51a62081df0ed46d4a3df295da0b0fe25c0115019f03f15ec86fabb4c852f83449e812f141a9395b3f70b766ebbd4ec2fae2b6955bd8f32684c15abfe8fd3a6261e52650e8807a92158d9f1463261a925e4bfba44bd20b166d532f0017185c3a6ac7957adefe45559e3072c8dc35abeba835a8cb01a71a15c736911126f27d46a36168ca5ef7dccd4e2886212602b181463e0dd30185c96348f9743a02aca8ec27c0b90dca270")
      //    assert(error1 == hex"08cd44478211b8a4370ab1368b5ffe8c9c92fb830ff4ad6e3b0a316df9d24176a081bab161ea0011585323930fa5b9fae0c85770a2279ff59ec427ad1bbff9001c0cd1497004bd2a0f68b50704cf6d6a4bf3c8b6a0833399a24b3456961ba00736785112594f65b6b2d44d9f5ea4e49b5e1ec2af978cbe31c67114440ac51a62081df0ed46d4a3df295da0b0fe25c0115019f03f15ec86fabb4c852f83449e812f141a93")

      val error2 = forwardErrorPacket(error1, sharedSecret2)
      assert(error2 == hex"a5d3e8634cfe78b2307d87c6d90be6fe7855b4f2cc9b1dfb19e92e4b79103f61ff9ac25f412ddfb7466e74f81b3e545563cdd8f5524dae873de61d7bdfccd496af2584930d2b566b4f8d3881f8c043df92224f38cf094cfc09d92655989531524593ec6d6caec1863bdfaa79229b5020acc034cd6deeea1021c50586947b9b8e6faa83b81fbfa6133c0af5d6b07c017f7158fa94f0d206baf12dda6b68f785b773b360fd0497e16cc402d779c8d48d0fa6315536ef0660f3f4e1865f5b38ea49c7da4fd959de4e83ff3ab686f059a45c65ba2af4a6a79166aa0f496bf04d06987b6d2ea205bdb0d347718b9aeff5b61dfff344993a275b79717cd815b6ad4c0beb568c4ac9c36ff1c315ec1119a1993c4b61e6eaa0375e0aaf738ac691abd3263bf937e3")
      //    assert(error2 == hex"6984b0ccd86f37995857363df13670acd064bfd1a540e521cad4d71c07b1bc3dff9ac25f41addfb7466e74f81b3e545563cdd8f5524dae873de61d7bdfccd496af2584930d2b566b4f8d3881f8c043df92224f38cf094cfc09d92655989531524593ec6d6caec1863bdfaa79229b5020acc034cd6deeea1021c50586947b9b8e6faa83b81fbfa6133c0af5d6b07c017f7158fa94f0d206baf12dda6b68f785b773b360fd")

      val error3 = forwardErrorPacket(error2, sharedSecret1)
      assert(error3 == hex"aac3200c4968f56b21f53e5e374e3a2383ad2b1b6501bbcc45abc31e59b26881b7dfadbb56ec8dae8857add94e6702fb4c3a4de22e2e669e1ed926b04447fc73034bb730f4932acd62727b75348a648a1128744657ca6a4e713b9b646c3ca66cac02cdab44dd3439890ef3aaf61708714f7375349b8da541b2548d452d84de7084bb95b3ac2345201d624d31f4d52078aa0fa05a88b4e20202bd2b86ac5b52919ea305a8949de95e935eed0319cf3cf19ebea61d76ba92532497fcdc9411d06bcd4275094d0a4a3c5d3a945e43305a5a9256e333e1f64dbca5fcd4e03a39b9012d197506e06f29339dfee3331995b21615337ae060233d39befea925cc262873e0530408e6990f1cbd233a150ef7b004ff6166c70c68d9f8c853c1abca640b8660db2921")
      //    assert(error3 == hex"669478a3ddf9ba4049df8fa51f73ac712b9c20380cda431696963a492713ebddb7dfadbb566c8dae8857add94e6702fb4c3a4de22e2e669e1ed926b04447fc73034bb730f4932acd62727b75348a648a1128744657ca6a4e713b9b646c3ca66cac02cdab44dd3439890ef3aaf61708714f7375349b8da541b2548d452d84de7084bb95b3ac2345201d624d31f4d52078aa0fa05a88b4e20202bd2b86ac5b52919ea305a8")

      val error4 = forwardErrorPacket(error3, sharedSecret0)
      assert(error4 == hex"9c5add3963fc7f6ed7f148623c84134b5647e1306419dbe2174e523fa9e2fbed3a06a19f899145610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5b665f307a2db0f7fbb757366067d88c50f7e829138fde4f78d39b5b5802f1b92a8a820865af5cc79f9f30bc3f461c66af95d13e5e1f0381c184572a91dee1c849048a647a1158cf884064deddbf1b0b88dfe2f791428d0ba0f6fb2f04e14081f69165ae66d9297c118f0907705c9c4954a199bae0bb96fad763d690e7daa6cfda59ba7f2c8d11448b604d12d")
      //    assert(error4 == hex"500d8596f76d3045bfdbf99914b98519fe76ea130dc22338c473ab68d74378b13a06a19f891145610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5b665f307a2db0f7fbb757366")

      // origin parses error packet and can see that it comes from node #4
      val Success(ErrorPacket(pubkey, failure)) = parseErrorPacket(error4, sharedSecrets)
      assert(pubkey == publicKeys(4))
      assert(failure == TemporaryNodeFailure)
    }
  }

  test("intermediate node replies with an error message") {
    for (payloads <- Seq(referenceSingleFramePayloads, referenceMultiFramePayloads, multiFramePayloadsFull)) {
      // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

      // origin build the onion packet
      val PacketAndSecrets(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

      // each node parses and forwards the packet
      // node #0
      val Success(ParsedPacket(_, packet1, sharedSecret0)) = parsePacket(privKeys(0), associatedData, packet.serialize)
      // node #1
      val Success(ParsedPacket(_, packet2, sharedSecret1)) = parsePacket(privKeys(1), associatedData, packet1.serialize)
      // node #2
      val Success(ParsedPacket(_, _, sharedSecret2)) = parsePacket(privKeys(2), associatedData, packet2.serialize)

      // node #2 want to reply with an error message
      val error = createErrorPacket(sharedSecret2, InvalidRealm)

      // error sent back to 1 and 0
      val error1 = forwardErrorPacket(error, sharedSecret1)
      val error2 = forwardErrorPacket(error1, sharedSecret0)

      // origin parses error packet and can see that it comes from node #2
      val Success(ErrorPacket(pubkey, failure)) = parseErrorPacket(error2, sharedSecrets)
      assert(pubkey == publicKeys(2))
      assert(failure == InvalidRealm)
    }
  }
}

object SphinxSpec {
  val privKeys = Seq(
    PrivateKey(hex"4141414141414141414141414141414141414141414141414141414141414141"),
    PrivateKey(hex"4242424242424242424242424242424242424242424242424242424242424242"),
    PrivateKey(hex"4343434343434343434343434343434343434343434343434343434343434343"),
    PrivateKey(hex"4444444444444444444444444444444444444444444444444444444444444444"),
    PrivateKey(hex"4545454545454545454545454545454545454545454545454545454545454545")
  )
  val publicKeys = privKeys.map(_.publicKey)
  assert(publicKeys == Seq(
    PublicKey(hex"02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619"),
    PublicKey(hex"0324653eac434488002cc06bbfb7f10fe18991e35f9fe4302dbea6d2353dc0ab1c"),
    PublicKey(hex"027f31ebc5462c1fdce1b737ecff52d37d75dea43ce11c74d25aa297165faa2007"),
    PublicKey(hex"032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"),
    PublicKey(hex"02edabbd16b41c8371b92ef2f04c1185b4f03b6dcd52ba9b78d9d7c89c8f221145")
  ))

  val sessionKey: PrivateKey = PrivateKey(hex"4141414141414141414141414141414141414141414141414141414141414141")

  // This test vector uses only single-frame payloads.
  // origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4
  val referenceSingleFramePayloads = Seq(
    hex"000000000000000000000000000000000000000000000000000000000000000000",
    hex"000101010101010101000000000000000100000001000000000000000000000000",
    hex"000202020202020202000000000000000200000002000000000000000000000000",
    hex"000303030303030303000000000000000300000003000000000000000000000000",
    hex"000404040404040404000000000000000400000004000000000000000000000000"
  )

  // This test vector uses a multi-frame payload intertwined with single-frame payloads.
  // The number of frames (-1) is encoded in the first 5 bits of the first byte.
  // origin -> node #0 (1 frame) -> node #1 (1 frame) -> node #2 (N frames) -> node #3 (1 frame) -> node #4 (1 frame)
  val referenceMultiFramePayloads = Seq(
    hex"000000000000000000000000000000000000000000000000000000000000000000",
    hex"000101010101010101000000000000000100000001000000000000000000000000",
    hex"20000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000000000000000000000000000000000000000000000000000000000000000000000000",
    hex"000303030303030303000000000000000300000003000000000000000000000000",
    hex"000404040404040404000000000000000400000004000000000000000000000000"
  )

  // This test vector uses multi-frame payloads.
  // It fills all the frames available in an onion packet.
  // The number of frames (-1) is encoded in the first 5 bits of the first byte.
  // origin -> node #0 (5 frames) -> node #1 (5 frames) -> node #2 (4 frames) -> node #3 (3 frames) -> node #4 (3 frames)
  val multiFramePayloadsFull = Seq(
    hex
    hex"2111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    hex"192222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
    hex"11333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
    hex"11444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
  )

  // This test vector uses a payload containing a single hop filling all the available frames.
  // origin -> recipient (20 frames)
  val maxFramesOneHopPayload = Seq(
    hex
  )

  val associatedData = ByteVector32(hex"4242424242424242424242424242424242424242424242424242424242424242")
}
