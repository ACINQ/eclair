/*
 * Copyright 2019 ACINQ SAS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fr.acinq.eclair.crypto

import fr.acinq.bitcoin.ByteVector32
import fr.acinq.bitcoin.Crypto.{PrivateKey, PublicKey}
import fr.acinq.eclair.wire._
import org.scalatest.FunSuite
import scodec.bits._

import scala.util.Success

/**
  * Created by fabrice on 10/01/17.
  */

class SphinxSpec extends FunSuite {

  import Sphinx._
  import SphinxSpec._

  /*
  hop_shared_secret[0] = 0x53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66
  hop_blinding_factor[0] = 0x2ec2e5da605776054187180343287683aa6a51b4b1c04d6dd49c45d8cffb3c36
  hop_ephemeral_pubkey[0] = 0x02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619

  hop_shared_secret[1] = 0xa6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae
  hop_blinding_factor[1] = 0xbf66c28bc22e598cfd574a1931a2bafbca09163df2261e6d0056b2610dab938f
  hop_ephemeral_pubkey[1] = 0x028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2

  hop_shared_secret[2] = 0x3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc
  hop_blinding_factor[2] = 0xa1f2dadd184eb1627049673f18c6325814384facdee5bfd935d9cb031a1698a5
  hop_ephemeral_pubkey[2] = 0x03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0

  hop_shared_secret[3] = 0x21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d
  hop_blinding_factor[3] = 0x7cfe0b699f35525029ae0fa437c69d0f20f7ed4e3916133f9cacbb13c82ff262
  hop_ephemeral_pubkey[3] = 0x031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595

  hop_shared_secret[4] = 0xb5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328
  hop_blinding_factor[4] = 0xc96e00dddaf57e7edcd4fb5954be5b65b09f17cb6d20651b4e90315be5779205
  hop_ephemeral_pubkey[4] = 0x03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4
  */
  test("generate ephemeral keys and secrets") {
    val (ephkeys, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    assert(ephkeys(0) == PublicKey(hex"02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619"))
    assert(sharedsecrets(0) == ByteVector32(hex"53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66"))
    assert(ephkeys(1) == PublicKey(hex"028f9438bfbf7feac2e108d677e3a82da596be706cc1cf342b75c7b7e22bf4e6e2"))
    assert(sharedsecrets(1) == ByteVector32(hex"a6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae"))
    assert(ephkeys(2) == PublicKey(hex"03bfd8225241ea71cd0843db7709f4c222f62ff2d4516fd38b39914ab6b83e0da0"))
    assert(sharedsecrets(2) == ByteVector32(hex"3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc"))
    assert(ephkeys(3) == PublicKey(hex"031dde6926381289671300239ea8e57ffaf9bebd05b9a5b95beaf07af05cd43595"))
    assert(sharedsecrets(3) == ByteVector32(hex"21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d"))
    assert(ephkeys(4) == PublicKey(hex"03a214ebd875aab6ddfd77f22c5e7311d7f77f17a169e599f157bbcdae8bf071f4"))
    assert(sharedsecrets(4) == ByteVector32(hex"b5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328"))
  }

  /*
  filler = 0xc6b008cf6414ed6e4c42c291eb505e9f22f5fe7d0ecdd15a833f4d016ac974d33adc6ea3293e20859e87ebfb937ba406abd025d14af692b12e9c9c2adbe307a679779259676211c071e614fdb386d1ff02db223a5b2fae03df68d321c7b29f7c7240edd3fa1b7cb6903f89dc01abf41b2eb0b49b6b8d73bb0774b58204c0d0e96d3cce45ad75406be0bc009e327b3e712a4bd178609c00b41da2daf8a4b0e1319f07a492ab4efb056f0f599f75e6dc7e0d10ce1cf59088ab6e873de377343880f7a24f0e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac
   */
  test("generate single-frame filler") {
    val (_, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    val filler = generateFiller("rho", sharedsecrets.dropRight(1), singleFramePayloads.dropRight(1))
    assert(filler == hex"c6b008cf6414ed6e4c42c291eb505e9f22f5fe7d0ecdd15a833f4d016ac974d33adc6ea3293e20859e87ebfb937ba406abd025d14af692b12e9c9c2adbe307a679779259676211c071e614fdb386d1ff02db223a5b2fae03df68d321c7b29f7c7240edd3fa1b7cb6903f89dc01abf41b2eb0b49b6b8d73bb0774b58204c0d0e96d3cce45ad75406be0bc009e327b3e712a4bd178609c00b41da2daf8a4b0e1319f07a492ab4efb056f0f599f75e6dc7e0d10ce1cf59088ab6e873de377343880f7a24f0e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac")
  }

  /*
  filler = 0x77df18cc319848a016c8239c0ebb732bad7978511122520680894c116cc99b15d3acd6b94a39c4ccba3928dc52fed3d50572159847c4772fe43f6812b02ed16b9ce08d4d8d472527872e4697e9d31e451f81e726ed53fdd417ef2ecaf30b6ed8bfc72fc71102a4417b97b9fb1a1af471eb3a4a5a33f1d8b67bba45d89449c91bf5b7346f22dc71b3081de49830f1ccdf14982abd6647169f6dfb3fbf4d12eb66b92370c34d865d6c794072125baa778da953ebe6c4448f3875096e2039d594d14443ecf2b5b9847d59a5d01f72c8162846a67f750796cbb767a42835dd015fe16493f38b9c3b6cd35f9d019d6538e993184b8eeca4e18ae02ec0b42c20749865d4ba3784137e0bc72e3ec1b347b0fad52738fd09e5f76f3f87374c217f6e42b5b5ef7b189d6e38e9a6a649e14bd1ffdd4affaedeac5577ce9b0064e1729c83c4fa313ad59abf83fe8340a09f9cc0b5e2dc78a8507bad79ffbb916d336ecb38bd9ed463855c94bb91349013d90108b10a748ec892782ed9d39322a06f77001b368d9c56fe88a60e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac
  */
  test("generate multi-frame filler") {
    val (_, sharedsecrets) = computeEphemeralPublicKeysAndSharedSecrets(sessionKey, publicKeys)
    val filler = generateFiller("rho", sharedsecrets.dropRight(1), multiFramePayloads.dropRight(1))
    assert(filler == hex"77df18cc319848a016c8239c0ebb732bad7978511122520680894c116cc99b15d3acd6b94a39c4ccba3928dc52fed3d50572159847c4772fe43f6812b02ed16b9ce08d4d8d472527872e4697e9d31e451f81e726ed53fdd417ef2ecaf30b6ed8bfc72fc71102a4417b97b9fb1a1af471eb3a4a5a33f1d8b67bba45d89449c91bf5b7346f22dc71b3081de49830f1ccdf14982abd6647169f6dfb3fbf4d12eb66b92370c34d865d6c794072125baa778da953ebe6c4448f3875096e2039d594d14443ecf2b5b9847d59a5d01f72c8162846a67f750796cbb767a42835dd015fe16493f38b9c3b6cd35f9d019d6538e993184b8eeca4e18ae02ec0b42c20749865d4ba3784137e0bc72e3ec1b347b0fad52738fd09e5f76f3f87374c217f6e42b5b5ef7b189d6e38e9a6a649e14bd1ffdd4affaedeac5577ce9b0064e1729c83c4fa313ad59abf83fe8340a09f9cc0b5e2dc78a8507bad79ffbb916d336ecb38bd9ed463855c94bb91349013d90108b10a748ec892782ed9d39322a06f77001b368d9c56fe88a60e36731a0b72092f8d5bc8cd346762e93b2bf203d00264e4bc136fc142de8f7b69154deb05854ea88e2d7506222c95ba1aab065c8a851391377d3406a35a9af3ac")
  }

  test("create single-frame packet (reference test vector)") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, singleFramePayloads, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619e5f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a71da571226458c510bbadd1276f045c21c520a07d35da256ef75b4367962437b0dd10f7d61ab590531cf08000178a333a347f8b4072e216400406bdf3bf038659793a86cae5f52d32f3438527b47a1cfc54285a8afec3a4c9f3323db0c946f5d4cb2ce721caad69320c3a469a202f3e468c67eaf7a7cda226d0fd32f7b48084dca885d15222e60826d5d971f64172d98e0760154400958f00e86697aa1aa9d41bee8119a1ec866abe044a9ad635778ba61fc0776dc832b39451bd5d35072d2269cf9b040d6ba38b54ec35f81d7fc67678c3be47274f3c4cc472aff005c3469eb3bc140769ed4c7f0218ff8c6c7dd7221d189c65b3b9aaa71a01484b122846c7c7b57e02e679ea8469b70e14fe4f70fee4d87b910cf144be6fe48eef24da475c0b0bcc6565ae82cd3f4e3b24c76eaa5616c6111343306ab35c1fe5ca4a77c0e314ed7dba39d6f1e0de791719c241a939cc493bea2bae1c1e932679ea94d29084278513c77b899cc98059d06a27d171b0dbdf6bee13ddc4fc17a0c4d2827d488436b57baa167544138ca2e64a11b43ac8a06cd0c2fba2d4d900ed2d9205305e2d7383cc98dacb078133de5f6fb6bed2ef26ba92cea28aafc3b9948dd9ae5559e8bd6920b8cea462aa445ca6a95e0e7ba52961b181c79e73bd581821df2b10173727a810c92b83b5ba4a0403eb710d2ca10689a35bec6c3a708e9e92f7d78ff3c5d9989574b00c6736f84c199256e76e19e78f0c98a9d580b4a658c84fc8f2096c2fbea8f5f8c59d0fdacb3be2802ef802abbecb3aba4acaac69a0e965abd8981e9896b1f6ef9d60f7a164b371af869fd0e48073742825e9434fc54da837e120266d53302954843538ea7c6c3dbfb4ff3b2fdbe244437f2a153ccf7bdb4c92aa08102d4f3cff2ae5ef86fab4653595e6a5837fa2f3e29f27a9cde5966843fb847a4a61f1e76c281fe8bb2b0a181d096100db5a1a5ce7a910238251a43ca556712eaadea167fb4d7d75825e440f3ecd782036d7574df8bceacb397abefc5f5254d2722215c53ff54af8299aaaad642c6d72a14d27882d9bbd539e1cc7a527526ba89b8c037ad09120e98ab042d3e8652b31ae0e478516bfaf88efca9f3676ffe99d2819dcaeb7610a626695f53117665d267d3f7abebd6bbd6733f645c72c389f03855bdf1e4b8075b516569b118233a0f0971d24b83113c0b096f5216a207ca99a7cddc81c130923fe3d91e7508c9ac5f2e914ff5dccab9e558566fa14efb34ac98d878580814b94b73acbfde9072f30b881f7f0fff42d4045d1ace6322d86a97d164aa84d93a60498065cc7c20e636f5862dc81531a88c60305a2e59a985be327a6902e4bed986dbf4a0b50c217af0ea7fdf9ab37f9ea1a1aaa72f54cf40154ea9b269f1a7c09f9f43245109431a175d50e2db0132337baa0ef97eed0fcf20489da36b79a1172faccc2f7ded7c60e00694282d93359c4682135642bc81f433574aa8ef0c97b4ade7ca372c5ffc23c7eddd839bab4e0f14d6df15c9dbeab176bec8b5701cf054eb3072f6dadc98f88819042bf10c407516ee58bce33fbe3b3d86a54255e577db4598e30a135361528c101683a5fcde7e8ba53f3456254be8f45fe3a56120ae96ea3773631fcb3873aa3abd91bcff00bd38bd43697a2e789e00da6077482e7b1b1a677b5afae4c54e6cbdf7377b694eb7d7a5b913476a5be923322d3de06060fd5e819635232a2cf4f0731da13b8546d1d6d4f8d75b9fce6c2341a71b0ea6f780df54bfdb0dd5cd9855179f602f917265f21f9190c70217774a6fbaaa7d63ad64199f4664813b955cff954949076dcf")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == singleFramePayloads)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"9b122c79c8aee73ea2cdbc22eca15bbcc9409a4cdd73d2b3fcd4fe26a492d376"))
    assert(packets(1).hmac == ByteVector32(hex"548e58057ab0a0e6c2d8ad8e855d89f9224279a5652895ea14f60bffb81590eb"))
    assert(packets(2).hmac == ByteVector32(hex"0daed5f832ef34ea8d0d2cc0699134287a2739c77152d9edc8fe5ccce7ec838f"))
    assert(packets(3).hmac == ByteVector32(hex"62cc962876e734e089e79eda497077fb411fac5f36afd43329040ecd1e16c6d9"))
    // this means that node #4 is the last node
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create multi-frame packet") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, multiFramePayloads, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619f4f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a7141453e5f8d22b6351810ae541ce499a09b4a9d9f80d1845c8960c85fc6d1a87bd24b2ce49922898e9353fa268086c00ae8b7f718405b72ad380cdbb38c85e02a00427eb4bdbda8fcd42b44708a9efde49cf753b75ebb389bf84d0bfbf58590e510e034572a01e409c30939e2e4a090ecc89c371820af54e06e4ad5495d4e5871838529d0eb5e1f0e26a68ee6e88eaa81124f360afcfe056ac1d095d40d4f681cf34499e80606dcf0216855a3e6540745a6c55da121259e09a3053ffea849b6fb32d964ebb4433f00240e6dabef9c103667ee4d734daf9c43e38e44fdc1019b13efe8923c154590ab474bd51db6d0ab655967e671542f1c5c0c4fd4245dfde83c5bd8251ed8983c280843d97530a72ae7c6fb883df5d645afb046c5cb9ee73b1c473bbf488ad3bc1ddc341296b537a887452f006673e5bb99097ae1599f7d6497afd66f26ea163e276f476a773473ac572f6022a238ccc7d0b7360bf8827de566a8726eb36ca48b0bc8a146f217ad9fbafc602d109ab4742214195087588d76183bbf27b399bd3e0c60849e4d86c446e38fbe37218a501bd3945caa2c2cd656d40e1f5f863c98a30f3ee8dcd7c564a85a9b61d09e2fcb2a47add89bde32cec62d5f102a797f33693d4e285448b7929a89dc0da684b44c8596f1f903245a6d6133b41433f94aac919c579be28c691a134e0e05c7372670c7947f99ce50ee24bc7f97ed12feaba3411a479af84c94610d672f026cbb2c2ad66f28f6aa8c79f2ae99c45c9f17bee5dc0a4137d62aa5886f52efdb81bde49237f6e34774a89780bda053ee4590c622544620b4c40e9a9cf8117e071c26faa85559307d6f504d5af9d291de16886146380ee7590dde7cdfcd7debd91997b62c9a79c0f3e0e7591a255ee6bb240841cfd1e8da49b7ec803c1473115cfa394ddcd11268defde62e80b0f5d639c3e34f15cd50602711b9e8cec2a5edae718390d60072e050cbb62738851fb3fe7918730113619890283982466e49b9509fab5dddc8e0f2a7af6dfa4eac057c4be2c28b0a0f8054a0ecc2ea6711bfc5df639ea53b4947f386b0434926374e2e26e982a43c85eb5b426316c9180fdfae0f2b8d4636c780a395fb0dc7a7dc2d4a08ccb81236ef162a7f72e16e215f1bb5506de64d81917a232ebd3c49063b87d44ea2a769577f538ca8ae7806a0688d00c50592f5c9dc642f19e21bd0f3c459f770fbbbaacdb9de345d65cee4ce2e4b27f8e2d2d1a3596bf87de876d64528951fe472e5c5bd7d9d1270eb7a692ffce5d1a9f799f5905b944d4a138f985434e5df98e819fa337d4dda140e631806598e60a46de98f498fe5750e280719af2b04c7bec6f82c494699113fa26bc8a4c65fdf9ddb857109b95d78526fc329ac3bae8bb6c45f98c35acd7e8294bfc86706aa6d99fa770dfb3f5c0ac43301911d75c91106744d48b139e71cea3e4a83f6a124c6496b5b5177625edd7ebbf003061bdfdc80be4177d68a8f1d1b9b100eb91a638eef34539af4f44e2056831ef278ba13e2574333d0f2f1ba6195e2f1595c95697d90e8664195059b5a88f88e540d84f49c03b60775c17ff61d49967c99be5c0f58427226e4b61342120a7396d8053b730b22ccf70937465be115b47ffa3d9d94909c9b43ff3f40d1c75662e7f1d733cbdafc837e9ef8fc225f8838ce3fe2540caccfa4413f87714f57497fe04a895489b2f3e93b6a14bb734419a270f8352c11ceaecf74802fbb6cfb3d5862482ffca751eaaae92f260c3f0dbfde855ad7507d54e96dc232991011422efa7f00f4e94e3a2eed2ebd5c195730350dc6987691fae4fb68")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == multiFramePayloads)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"e575aa1b4dee5e5851cea7528644d23ffda8e6948821b682c80fc4e694b541b6"))
    assert(packets(1).hmac == ByteVector32(hex"1ebf0754edc9b16e035870078172138ebd58e82d34bc5f76a973979d73776116"))
    assert(packets(2).hmac == ByteVector32(hex"400dd7fd80fed9963618a6c262e7a7182cc9c8618f69245fe8080173c1faa501"))
    assert(packets(3).hmac == ByteVector32(hex"49602e7e652eb2987df05b5ea1e45c797791c9a29f53b1309705175097def065"))
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create multi-frame packet filling onion") {
    val Sphinx.PacketAndSecrets(onion, sharedSecrets) = Sphinx.makePacket(sessionKey, publicKeys, multiFramePayloadsFull, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619c4f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a7141453e5f8d22b6351810ae541ce499a09b4a9d9f80d1845c8960c85fc6d1a87bd24b2ce49922898e9353fa268086c00ae8b7f718405b72ad380cdbb38c85e02a00427eb4bdbda8fcd42b44708a9efde49cf753b75ebb389bf84d0bfbf58590e510e034572a01e409c30939e2e4a090ecc89c371820af54e06e4ad5495d4e58718385cca5414552e078fedf284fdc2cc5c070cba21a6a8d4b77525ddbc9a9fca9b2f29aac5783ee8badd709f81c73ff60556cf2ee623af073b5a84799acc1ca46b764f74b97068c7826cc0579794a540d7a55e49eac26a6930340132e946a983240b0cd1b732e305c1042f590c4b26f140fc1cab3ee6f620958e0979f85eddf586c410ce4fcdbbfcca2995dccb71d6ccf759220bbbf52b19b0135308490c476816a316a3dbfcacbe96df37b4a7cb6b3b88dba165efe681b8fcb5c72febc91b133c6c1a15a5dd2b7ce8a23cf43225931b5967094f4f1c9c88eb8e864a5ac0f8276bc7036f2b36784b2ab4d0435336a8445b64cc7af1b703c8c94b1a83411d0234b1fd3fff0b0dc7992c9f5ab8fc8395d3cd70c5dd6ef9b2408d1b8608f6fff191c2437e8694296e3224b92e3b7a872877b31e5d2dd70ffaa9e8fd70ea552d85fb27289f91e1772794156c87b81bb2c9a470d364945fa1c96816dbc0f6440d3071a4bfc8596012ef384f20776d7384ef196db73b3aac192bf890666f0d5551a4551421558d87bf90218159b96bd0c4aa2acb6755e5db85e5fd41810434f3dd6680be8636190e249f3b97b1f65365922bbe2339bf4d815dc7cb0b588f8d0ef1d5017cff1501135d78d0996e5c122ce52cd6b49b4aba6222f4ba93c23643be48ddacf552221561720a8dc6b71ea07c65e869179c71ebb0ff002ed8a53ce05e0e6024addbbf3118f34319d75e4850d5e17fbce98ed8458b9e5ab996e00ec697d3752f5a1d6a3ad691d8015f78b10afb9b62bd92e0dbdfb2ed7783771d61b86d8bcb8e167e74919b0f61fd1c63ed6153abeb3d90b8bb6d5932d559dda555c9e0482cf3c953eb69f4c1a58e4dcd31361958666c2fdbe30bc281684c7421b1d23635c7e9176651c2d91db9a07f50dcaa914f1f50e153dafd00381bc868bfbdf84401ad5a22516a91653808d8942190441e600c60ee23358cf56f2e5007314df2f4700c24b27dae11cb45817459a566f582ab3d899d48fa61e8c76526c84994be0281bb3f20494b9bd8973e4169817250803d23a3fdd97f0a3c3806eb17177d4f07ec4c2d30fb5318b9feb9b055c8571fb7d0dd1782b9eb1b0155564b7fa21998c9c696b5979c81041818c2e774395141ef2283aea4353397d90dd37923aefcadda3a66785cdb335ace25d53a250ab57ff7cc6c43034d8afef7d1fdbb07ca85639586eb939c4c96ee38ca2c8dd5c14e03ddef13b25cdd2af2486f02f73de04571b402f6ead23cf3b27efaa0f3b88df280c77acc16ddd5359b06e0e2aef47b98f01a86df40b4974db1c36466ca7208d56e9088709dc499b930ec497f505060501391c1c396121efc0fa152ba6967b551fe13a0ae135a7bf8e347c52858d66bc1a07c379ec7a34654c3afe8443e30ea344c27af96a5d1ff1b94d9744fa1f273320f38c4a9bfffa81e05ae0dbbd2a232e57f4fca93fe588ebcd39bd334a4d26b7223dfeb10c0f8b7d42d2dfbe5264073752ab8e63f5fe65d627bfff286c4bf429cad13a17bc21412038ccddfdb956dfd1bef80d2adc04700bf50adb875f00c4e133e6c6bc88ae152bc2eb59450ce6f2f27522ba6cfa43847495019b0282f6ffdb3efbbe10a70f89ea311652670932218d70a9335163f25c7c45")

    val Success(Sphinx.ParsedPacket(payload0, nextPacket0, sharedSecret0)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    val Success(Sphinx.ParsedPacket(payload1, nextPacket1, sharedSecret1)) = Sphinx.parsePacket(privKeys(1), associatedData, nextPacket0.serialize)
    val Success(Sphinx.ParsedPacket(payload2, nextPacket2, sharedSecret2)) = Sphinx.parsePacket(privKeys(2), associatedData, nextPacket1.serialize)
    val Success(Sphinx.ParsedPacket(payload3, nextPacket3, sharedSecret3)) = Sphinx.parsePacket(privKeys(3), associatedData, nextPacket2.serialize)
    val Success(Sphinx.ParsedPacket(payload4, nextPacket4, sharedSecret4)) = Sphinx.parsePacket(privKeys(4), associatedData, nextPacket3.serialize)
    assert(Seq(payload0, payload1, payload2, payload3, payload4) == multiFramePayloadsFull)
    assert(Seq(sharedSecret0, sharedSecret1, sharedSecret2, sharedSecret3, sharedSecret4) == sharedSecrets.map(_._1))

    val packets = Seq(nextPacket0, nextPacket1, nextPacket2, nextPacket3, nextPacket4)
    assert(packets(0).hmac == ByteVector32(hex"d2481b1b6a9ab718e8d9103b4cff08fd8d63fce39f46ffbbc385504755d32e3b"))
    assert(packets(1).hmac == ByteVector32(hex"92ee624aadb2a92e0e4645b1e7c63587f593c97580e6d865164b93e26a4ea4a1"))
    assert(packets(2).hmac == ByteVector32(hex"3282b10831d5591893c491d8bb25a030707d7e6ed97df32e3dc0b8608f3e06bb"))
    assert(packets(3).hmac == ByteVector32(hex"34fa139c3dcbb0cad1f207d9d240d774945384c1feac82eb064810c3cb098d3b"))
    assert(packets(4).hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("create 20-frames 1-hop packet") {
    val Sphinx.PacketAndSecrets(onion, _) = Sphinx.makePacket(sessionKey, publicKeys.take(1), maxFramesOneHopPayload, associatedData)
    assert(onion.serialize == hex"0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f2836866197cb3011280e52d8070f7a62f005cd4570558fba2feca39adba8b1d99c5cd39783303077c1dcf60f4775a52ec165ea6dbe2d908dfddc293c61ecb228a1d8493ea3990096ea6db60cbccd111b864c2c48248aaf5b55a021930ef7a4e99f1cec7a26842003cf6ffffeabe96690632c8dcbfa6deb511f51cf97ad9ba0f49b9b7c7d2a752a276156843a64b814b7ba0a6e2d2ae8ade755a62ed16a22c08970b1f0c1a33c1c78ee7030710a23abc9d6a0d9e6e87823289e05828cf0935101f998bebbeebf0b0d8ee15c1acc9ef954bba5e31bd22172eb0ac2078b231f7ea05dbee838804f526b509d544ce3a648e473b3b08164f3817a6dcee64e4d14102516cd628da7002f28f59316c721e5200b7d286f02d564d8388f1ac2d204b1aa2d5ddc7af9d1a2e034ea66cd1e6958a41a8961d863eb67b2f6a0470730f3adc318d7d110364847da00644dfdcc83e0ddaa5a772be1acc26ccb6a403740bc3f775370097a5e6e8e92f77b49d3f78df3ee5576377dbac408699a80f85ca22bcfc5f6b67de26f7d97171bd98a9f8bd0c3973803875d3b4fdc6c81a9d3e2bf9695a1090ef7739db5bbd98a732f03f854bb9e2c5657f780faba4e4fc2499263df4ea93e741f1b6c3fcb9d43618fd1e86e4f9e2b5c2978537d9dc7278682955a947f4a422b68636d7dff3c1a388a222a321d065ac498841d5c861cf86776c9526983f0d7c97713d2f41349db56457fcaca8ecad3be9d1a6fefd5a8fc666a9692895b17f690dbf1ce2c130a4af5fda03109d55a20e2d31164bca959fd5dc404666e32180335758671b24fc3c9cb66325fab88ee47126d57bf8fb3730f6c727ce9c02dc1f084d277d581b53565476a190f445d95b763fb42dda62371d97554b6fec20b965c949ed8e3894c0b5d05978071c4e212bdac53ba02d461af159bd95a6a7fdf15b06aa4d5249671181f454a519a3c16a9e014d245a971e9592d469fb54902c96f355862de0dc48536e40812262f108d4346ff46ab876d2c0cc8045db20efc32cb04ce2fee5cdf0f5b5ec9f0e05a137a400d69313bd414a7572712fa826d10241e035728e5e3fae120b9ff8c3ca507f93d3e8337b4f01e6ddf5d0e19832c0ade48eaf31b24c8ea85a561dfec6d0110bb5f7107308faaf0e0b5c7b68af795d41a93b050e6b0900a0a9e310cfe02612e81b6ef83ce06cd41e169db2bf2d9d94f769d84d1d346c65b94c2e7e9164e3885e1b319cd9aac301dd326a72edbcf2827683c88a9780b3778b26fd2b9c1294abd99ccaab4163f8c67fd5118aba7424521f67b8b95853a860946cb4b3be76880c22811f2b3578520fd80630ce4a80492156703143e08642e55c566683646a8ddd0825db489cc86041f2affb2e22c0962579314b8f1086f16940d75ff0b42e2e30ff2e3cee6912fa7a72851e9d8194ab80f7d0861c97b81d2c8298c733493c5720ece121a0c427c115d39e150fd832f0a7a0fbd578f7d29619d69006be0014d02e1817f25e92eee05da7bb8b452b5df264928725caf27ee1b2cff2e9fbbb434bcf9c6c8642772afe7ee03637bdc4e58948e99ba7512e1fa2269325361a0967626652d9f2624699e3b8fddcc0359c4b3848f29ecd2c64be96e0cdfb903e96e0b4f37c652c901be1dc5e3c22b1816e1e8686bb299bc3af891c6e34e7558f80c7e86ee73393a19621ae952308a0659d55ed360772199584238d3ff827c9489eb12942c6f5081de64aa030b54135488777517632d3508796a6bcda3c4e65f4320364d4b76971661e60d5379817456b938268ee4e7a282e4a60b25dbb28ea8877a5069f819e5d1d31d9140bbc627ff3cc71285778b5a49c2c741b09b61c113eed6dd067d430d9c64f8918f0bc7ee2c0")

    val Success(Sphinx.ParsedPacket(payload, nextPacket, _)) = Sphinx.parsePacket(privKeys(0), associatedData, onion.serialize)
    assert(payload == maxFramesOneHopPayload.head)
    assert(nextPacket.hmac == ByteVector32(hex"0000000000000000000000000000000000000000000000000000000000000000"))
  }

  test("last node replies with an error message") {
    for (payloads <- Seq(singleFramePayloads, multiFramePayloads, multiFramePayloadsFull)) {
      // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

      // origin build the onion packet
      val PacketAndSecrets(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

      // each node parses and forwards the packet
      // node #0
      val Success(ParsedPacket(_, packet1, sharedSecret0)) = parsePacket(privKeys(0), associatedData, packet.serialize)
      // node #1
      val Success(ParsedPacket(_, packet2, sharedSecret1)) = parsePacket(privKeys(1), associatedData, packet1.serialize)
      // node #2
      val Success(ParsedPacket(_, packet3, sharedSecret2)) = parsePacket(privKeys(2), associatedData, packet2.serialize)
      // node #3
      val Success(ParsedPacket(_, packet4, sharedSecret3)) = parsePacket(privKeys(3), associatedData, packet3.serialize)
      // node #4
      val Success(ParsedPacket(_, packet5, sharedSecret4)) = parsePacket(privKeys(4), associatedData, packet4.serialize)
      assert(packet5.isLastPacket)

      // node #4 want to reply with an error message
      val error = createErrorPacket(sharedSecret4, TemporaryNodeFailure)
      assert(error == hex"a5e6bd0c74cb347f10cce367f949098f2457d14c046fd8a22cb96efb30b0fdcda8cb9168b50f2fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c243fb4847e004f5256b3e90e2edde4c9fb3082ddfe4d1e734cacd96ef0706bf63c9984e22dc98851bcccd1c3494351feb458c9c6af41c0044bea3c47552b1d992ae542b17a2d0bba1a096c78d169034ecb55b6e3a7263c26017f033031228833c1daefc0dedb8cf7c3e37c9c37ebfe42f3225c326e8bcfd338804c145b16e34e4")
      //    assert(error == hex"69b1e5a3e05a7b5478e6529cd1749fdd8c66da6f6db42078ff8497ac4e117e91a8cb9168b58f2fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c2")
      // error sent back to 3, 2, 1 and 0
      val error1 = forwardErrorPacket(error, sharedSecret3)
      assert(error1 == hex"c49a1ce81680f78f5f2000cda36268de34a3f0a0662f55b4e837c83a8773c22aa081bab1616a0011585323930fa5b9fae0c85770a2279ff59ec427ad1bbff9001c0cd1497004bd2a0f68b50704cf6d6a4bf3c8b6a0833399a24b3456961ba00736785112594f65b6b2d44d9f5ea4e49b5e1ec2af978cbe31c67114440ac51a62081df0ed46d4a3df295da0b0fe25c0115019f03f15ec86fabb4c852f83449e812f141a9395b3f70b766ebbd4ec2fae2b6955bd8f32684c15abfe8fd3a6261e52650e8807a92158d9f1463261a925e4bfba44bd20b166d532f0017185c3a6ac7957adefe45559e3072c8dc35abeba835a8cb01a71a15c736911126f27d46a36168ca5ef7dccd4e2886212602b181463e0dd30185c96348f9743a02aca8ec27c0b90dca270")
      //    assert(error1 == hex"08cd44478211b8a4370ab1368b5ffe8c9c92fb830ff4ad6e3b0a316df9d24176a081bab161ea0011585323930fa5b9fae0c85770a2279ff59ec427ad1bbff9001c0cd1497004bd2a0f68b50704cf6d6a4bf3c8b6a0833399a24b3456961ba00736785112594f65b6b2d44d9f5ea4e49b5e1ec2af978cbe31c67114440ac51a62081df0ed46d4a3df295da0b0fe25c0115019f03f15ec86fabb4c852f83449e812f141a93")

      val error2 = forwardErrorPacket(error1, sharedSecret2)
      assert(error2 == hex"a5d3e8634cfe78b2307d87c6d90be6fe7855b4f2cc9b1dfb19e92e4b79103f61ff9ac25f412ddfb7466e74f81b3e545563cdd8f5524dae873de61d7bdfccd496af2584930d2b566b4f8d3881f8c043df92224f38cf094cfc09d92655989531524593ec6d6caec1863bdfaa79229b5020acc034cd6deeea1021c50586947b9b8e6faa83b81fbfa6133c0af5d6b07c017f7158fa94f0d206baf12dda6b68f785b773b360fd0497e16cc402d779c8d48d0fa6315536ef0660f3f4e1865f5b38ea49c7da4fd959de4e83ff3ab686f059a45c65ba2af4a6a79166aa0f496bf04d06987b6d2ea205bdb0d347718b9aeff5b61dfff344993a275b79717cd815b6ad4c0beb568c4ac9c36ff1c315ec1119a1993c4b61e6eaa0375e0aaf738ac691abd3263bf937e3")
      //    assert(error2 == hex"6984b0ccd86f37995857363df13670acd064bfd1a540e521cad4d71c07b1bc3dff9ac25f41addfb7466e74f81b3e545563cdd8f5524dae873de61d7bdfccd496af2584930d2b566b4f8d3881f8c043df92224f38cf094cfc09d92655989531524593ec6d6caec1863bdfaa79229b5020acc034cd6deeea1021c50586947b9b8e6faa83b81fbfa6133c0af5d6b07c017f7158fa94f0d206baf12dda6b68f785b773b360fd")

      val error3 = forwardErrorPacket(error2, sharedSecret1)
      assert(error3 == hex"aac3200c4968f56b21f53e5e374e3a2383ad2b1b6501bbcc45abc31e59b26881b7dfadbb56ec8dae8857add94e6702fb4c3a4de22e2e669e1ed926b04447fc73034bb730f4932acd62727b75348a648a1128744657ca6a4e713b9b646c3ca66cac02cdab44dd3439890ef3aaf61708714f7375349b8da541b2548d452d84de7084bb95b3ac2345201d624d31f4d52078aa0fa05a88b4e20202bd2b86ac5b52919ea305a8949de95e935eed0319cf3cf19ebea61d76ba92532497fcdc9411d06bcd4275094d0a4a3c5d3a945e43305a5a9256e333e1f64dbca5fcd4e03a39b9012d197506e06f29339dfee3331995b21615337ae060233d39befea925cc262873e0530408e6990f1cbd233a150ef7b004ff6166c70c68d9f8c853c1abca640b8660db2921")
      //    assert(error3 == hex"669478a3ddf9ba4049df8fa51f73ac712b9c20380cda431696963a492713ebddb7dfadbb566c8dae8857add94e6702fb4c3a4de22e2e669e1ed926b04447fc73034bb730f4932acd62727b75348a648a1128744657ca6a4e713b9b646c3ca66cac02cdab44dd3439890ef3aaf61708714f7375349b8da541b2548d452d84de7084bb95b3ac2345201d624d31f4d52078aa0fa05a88b4e20202bd2b86ac5b52919ea305a8")

      val error4 = forwardErrorPacket(error3, sharedSecret0)
      assert(error4 == hex"9c5add3963fc7f6ed7f148623c84134b5647e1306419dbe2174e523fa9e2fbed3a06a19f899145610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5b665f307a2db0f7fbb757366067d88c50f7e829138fde4f78d39b5b5802f1b92a8a820865af5cc79f9f30bc3f461c66af95d13e5e1f0381c184572a91dee1c849048a647a1158cf884064deddbf1b0b88dfe2f791428d0ba0f6fb2f04e14081f69165ae66d9297c118f0907705c9c4954a199bae0bb96fad763d690e7daa6cfda59ba7f2c8d11448b604d12d")
      //    assert(error4 == hex"500d8596f76d3045bfdbf99914b98519fe76ea130dc22338c473ab68d74378b13a06a19f891145610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5b665f307a2db0f7fbb757366")

      // origin parses error packet and can see that it comes from node #4
      val Success(ErrorPacket(pubkey, failure)) = parseErrorPacket(error4, sharedSecrets)
      assert(pubkey == publicKeys(4))
      assert(failure == TemporaryNodeFailure)
    }
  }

  test("intermediate node replies with an error message") {
    for (payloads <- Seq(singleFramePayloads, multiFramePayloads, multiFramePayloadsFull)) {
      // route: origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4

      // origin build the onion packet
      val PacketAndSecrets(packet, sharedSecrets) = makePacket(sessionKey, publicKeys, payloads, associatedData)

      // each node parses and forwards the packet
      // node #0
      val Success(ParsedPacket(_, packet1, sharedSecret0)) = parsePacket(privKeys(0), associatedData, packet.serialize)
      // node #1
      val Success(ParsedPacket(_, packet2, sharedSecret1)) = parsePacket(privKeys(1), associatedData, packet1.serialize)
      // node #2
      val Success(ParsedPacket(_, _, sharedSecret2)) = parsePacket(privKeys(2), associatedData, packet2.serialize)

      // node #2 want to reply with an error message
      val error = createErrorPacket(sharedSecret2, InvalidRealm)

      // error sent back to 1 and 0
      val error1 = forwardErrorPacket(error, sharedSecret1)
      val error2 = forwardErrorPacket(error1, sharedSecret0)

      // origin parses error packet and can see that it comes from node #2
      val Success(ErrorPacket(pubkey, failure)) = parseErrorPacket(error2, sharedSecrets)
      assert(pubkey == publicKeys(2))
      assert(failure == InvalidRealm)
    }
  }
}

object SphinxSpec {
  val privKeys = Seq(
    PrivateKey(hex"4141414141414141414141414141414141414141414141414141414141414141"),
    PrivateKey(hex"4242424242424242424242424242424242424242424242424242424242424242"),
    PrivateKey(hex"4343434343434343434343434343434343434343434343434343434343434343"),
    PrivateKey(hex"4444444444444444444444444444444444444444444444444444444444444444"),
    PrivateKey(hex"4545454545454545454545454545454545454545454545454545454545454545")
  )
  val publicKeys = privKeys.map(_.publicKey)
  assert(publicKeys == Seq(
    PublicKey(hex"02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619"),
    PublicKey(hex"0324653eac434488002cc06bbfb7f10fe18991e35f9fe4302dbea6d2353dc0ab1c"),
    PublicKey(hex"027f31ebc5462c1fdce1b737ecff52d37d75dea43ce11c74d25aa297165faa2007"),
    PublicKey(hex"032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"),
    PublicKey(hex"02edabbd16b41c8371b92ef2f04c1185b4f03b6dcd52ba9b78d9d7c89c8f221145")
  ))

  val sessionKey: PrivateKey = PrivateKey(hex"4141414141414141414141414141414141414141414141414141414141414141")

  // This test vector uses only single-frame payloads.
  // origin -> node #0 -> node #1 -> node #2 -> node #3 -> node #4
  val singleFramePayloads = Seq(
    hex"000000000000000000000000000000000000000000000000000000000000000000",
    hex"000101010101010101000000000000000100000001000000000000000000000000",
    hex"000202020202020202000000000000000200000002000000000000000000000000",
    hex"000303030303030303000000000000000300000003000000000000000000000000",
    hex"000404040404040404000000000000000400000004000000000000000000000000"
  )

  // This test vector uses multi-frame payloads intertwined with single-frame payloads.
  // The number of frames (-1) is encoded in the first 5 bits of the first byte.
  // origin -> node #0 (3 frames) -> node #1 (1 frame) -> node #2 (2 frames) -> node #3 (1 frame) -> node #4 (1 frame)
  val multiFramePayloads = Seq(
    hex"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    hex"000101010101010101000000000000000100000001000000000000000000000000",
    hex"0922222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
    hex"013333333333333333333333333333333333333333333333333333333333333333",
    hex"000404040404040404000000000000000400000004000000000000000000000000"
  )

  // This test vector uses multi-frame payloads.
  // It fills all the frames available in an onion packet.
  // The number of frames (-1) is encoded in the first 5 bits of the first byte.
  // origin -> node #0 (5 frames) -> node #1 (5 frames) -> node #2 (4 frames) -> node #3 (3 frames) -> node #4 (3 frames)
  val multiFramePayloadsFull = Seq(
    hex
    hex"2111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    hex"192222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
    hex"11333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
    hex"11444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
  )

  // This test vector uses a payload containing a single hop filling all the available frames.
  // origin -> recipient (20 frames)
  val maxFramesOneHopPayload = Seq(
    hex
  )

  val associatedData = ByteVector32(hex"4242424242424242424242424242424242424242424242424242424242424242")
}
