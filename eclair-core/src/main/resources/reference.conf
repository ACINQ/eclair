eclair {

  chain = "mainnet" // "regtest" for regtest, "testnet" for testnet, "mainnet" for mainnet

  server {
    public-ips = [] // external ips, will be announced on the network
    binding-ip = "0.0.0.0"
    port = 9735
  }

  api {
    enabled = false // disabled by default for security reasons
    binding-ip = "127.0.0.1"
    port = 8080
    password = "" // password for basic auth, must be non empty if json-rpc api is enabled
  }

  // override this with a script/exe that will be called everytime a new database backup has been created
  # backup-notify-script = "/absolute/path/to/script.sh"

  watcher-type = "bitcoind" // other *experimental* values include "electrum"

  bitcoind {
    host = "localhost"
    rpcport = 8332
    rpcuser = "foo"
    rpcpassword = "bar"
    zmqblock = "tcp://127.0.0.1:29000"
    zmqtx = "tcp://127.0.0.1:29000"
  }

  min-feerate = 3 // minimum feerate in satoshis per byte
  smooth-feerate-window = 6 // 1 = no smoothing
  feerate-provider-timeout = 5 seconds // max time we'll wait for answers from a fee provider before we fallback to the next one

  node-alias = "eclair"
  node-color = "49daaa"

  trampoline-payments-enable = false // TODO: @t-bast: once spec-ed this should use a global feature flag
  features = "0a8a" // initial_routing_sync + option_data_loss_protect + option_channel_range_queries + option_channel_range_queries_ex + variable_length_onion
  override-features = [ // optional per-node features
    #  {
    #    nodeid = "02aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    #    features = ""
    #  }
  ]
  sync-whitelist = [] // a list of public keys; if non-empty, we will only do the initial sync with those peers
  channel-flags = 1 // announce channels

  dust-limit-satoshis = 546
  max-htlc-value-in-flight-msat = 5000000000 // 50 mBTC
  htlc-minimum-msat = 1
  max-accepted-htlcs = 30

  reserve-to-funding-ratio = 0.01 // recommended by BOLT #2
  max-reserve-to-funding-ratio = 0.05 // channel reserve can't be more than 5% of the funding amount (recommended: 1%)

  to-remote-delay-blocks = 720 // number of blocks that the other node's to-self outputs must be delayed (720 ~ 5 days)
  max-to-local-delay-blocks = 2016 // maximum number of blocks that we are ready to accept for our own delayed outputs (2016 ~ 2 weeks)
  mindepth-blocks = 3
  expiry-delta-blocks = 144
  // When we receive the pre-image for an HTLC and want to fulfill it but the upstream peer stops responding, we want to
  // avoid letting its HTLC-timeout transaction become enforceable on-chain (otherwise there is a race condition between
  // our HTLC-success and their HTLC-timeout).
  // We will close the channel when the HTLC-timeout will happen in less than this number.
  fulfill-safety-before-timeout-blocks = 6

  fee-base-msat = 1000
  fee-proportional-millionths = 100 // fee charged per transferred satoshi in millionths of a satoshi (100 = 0.01%)

  on-chain-fees {
    default-feerates { // those are per target block, in satoshis per kilobyte
      1 = 210000
      2 = 180000
      6 = 150000
      12 = 110000
      36 = 50000
      72 = 20000
      144 = 15000
    }

    // number of blocks to target when computing fees for each transaction type
    target-blocks {
      funding = 6        // target for the funding transaction
      commitment = 2     // target for the commitment transaction (used in force-close scenario) *do not change this unless you know what you are doing*
      mutual-close = 12  // target for the mutual close transaction
      claim-main = 12    // target for the claim main transaction (tx that spends main channel output back to wallet)
    }

    // maximum local vs remote feerate mismatch; 1.0 means 100%
    // actual check is abs((local feerate - remote fee rate) / (local fee rate + remote fee rate)/2) > fee rate mismatch
    max-feerate-mismatch = 1.56 // will allow remote fee rates up to 8x bigger or smaller than our local fee rate
    close-on-offline-feerate-mismatch = true // do not change this unless you know what you are doing

    // funder will send an UpdateFee message if the difference between current commitment fee and actual current network fee is greater
    // than this ratio.
    update-fee-min-diff-ratio = 0.1
  }

  revocation-timeout = 20 seconds // after sending a commit_sig, we will wait for at most that duration before disconnecting

  auth-timeout = 10 seconds // will disconnect if connection authentication doesn't happen within that timeframe
  init-timeout = 10 seconds // will disconnect if initialization doesn't happen within that timeframe
  ping-interval = 30 seconds
  ping-timeout = 10 seconds // will disconnect if peer takes longer than that to respond
  ping-disconnect = true // disconnect if no answer to our pings
  auto-reconnect = true
  initial-random-reconnect-delay = 5 seconds // we add a random delay before the first reconnection attempt, capped by this value
  max-reconnect-interval = 1 hour // max interval between two reconnection attempts, after the exponential backoff period

  payment-request-expiry = 1 hour // default expiry for payment requests generated by this node
  multi-part-payment-expiry = 60 seconds // default expiry for receiving all parts of a multi-part payment
  min-funding-satoshis = 100000
  max-funding-satoshis = 16777215 // to open channels larger than 16777215 you must enable the large_channel_support feature in 'eclair.features'
  max-payment-attempts = 5

  autoprobe-count = 0 // number of parallel tasks that send test payments to detect invalid channels

  router {
    randomize-route-selection = true // when computing a route for a payment we randomize the final selection
    channel-exclude-duration = 60 seconds // when a temporary channel failure is returned, we exclude the channel from our payment routes for this duration
    broadcast-interval = 60 seconds // see BOLT #7
    network-stats-interval = 6 hours // frequency at which we refresh global network statistics (expensive operation)
    init-timeout = 5 minutes

    sync {
      request-node-announcements = true // if true we will ask for node announcements when we receive channel ids that we don't know
      encoding-type = zlib // encoding for short_channel_ids and timestamps in query channel sync messages; other possible value is "uncompressed"
      channel-range-chunk-size = 1500 // max number of short_channel_ids (+ timestamps + checksums) in reply_channel_range *do not change this unless you know what you are doing*
      channel-query-chunk-size = 100 // max number of short_channel_ids in query_short_channel_ids *do not change this unless you know what you are doing*
    }

    // the values below will be used to perform route searching
    path-finding {
      max-route-length = 6         // max route length for the 'first pass', if none is found then a second pass is made with no limit
      max-cltv = 1008             // max acceptable cltv expiry for the payment (1008 ~ 1 week)
      fee-threshold-sat = 21       // if fee is below this value we skip the max-fee-pct check
      max-fee-pct = 0.03           // route will be discarded if fee is above this value (in percentage relative to the total payment amount); doesn't apply if fee < fee-threshold-sat

      // channel 'weight' is computed with the following formula: channelFee * (cltvDelta * ratio-cltv + channelAge * ratio-channel-age + channelCapacity * ratio-channel-capacity)
      // the following parameters can be used to ask the router to use heuristics to find i.e: 'cltv-optimized' routes, **the sum of the three ratios must be > 0 and <= 1**
      heuristics-enable = true     // if true uses heuristics for path-finding
      ratio-cltv = 0.15            // when computing the weight for a channel, consider its CLTV delta in this proportion
      ratio-channel-age = 0.35     // when computing the weight for a channel, consider its AGE in this proportion
      ratio-channel-capacity = 0.5 // when computing the weight for a channel, consider its CAPACITY in this proportion
    }
  }

  socks5 {
    enabled = false
    host = "127.0.0.1"
    port = 9050
    use-for-ipv4 = true
    use-for-ipv6 = true
    use-for-tor = true
    randomize-credentials = false // this allows tor stream isolation
  }

  tor {
    enabled = false
    protocol = "v3" // v2, v3
    auth = "password" // safecookie, password
    password = "foobar" // used when auth=password
    host = "127.0.0.1"
    port = 9051
    private-key-file = "tor.dat"
  }

  db {
    driver = "sqlite" // sqlite, psql
    psql {
      database = "eclair"
      host = "localhost"
      port = 5432
      username = ""
      password = ""
      pool {
        max-size = 10 // recommended value = number_of_cpu_cores * 2
        connection-timeout = 30 seconds
        idle-timeout = 10 minutes
        max-life-time = 30 minutes
      }
      ownership-lease {
        lease-interval = 5 minutes // lease-interval must be greater than lease-renew-interval
        lease-renew-interval = 1 minute
        lock-timeout = 5 seconds
      }
      lock-type = "ownership-lease" // optimistic, ownership-lease or none.
    }
  }
}

// do not edit or move this section
eclair {
  backup-mailbox {
    mailbox-type = "akka.dispatch.BoundedMailbox"
    mailbox-capacity = 1
    mailbox-push-timeout-time = 0
  }
  backup-dispatcher {
    executor = "thread-pool-executor"
    type = PinnedDispatcher
  }
}