eclair {
  enable-kamon = false

  front {
    // To be overriden with the same key as the backend, so that the front has the same nodeid
    priv-key-provider = "seed" // aws-sm (AWS Secrets Manager) or env (environment variable) or seed (seed.dat)
    priv-key = ${?NODE_PRIV_KEY} // used if priv-key-provider = env
    aws-sm.priv-key-name = "node-priv-key" // used if priv-key-provider = aws-sm
    // As a security measure, we also require the pub key, which will be matched against the priv key to make sure the
    // front is really using the expected key
    pub = ${?NODE_PUB_KEY}

    backend.ip = 127.0.0.1
    backend.ip = ${?BACKEND_IP}
  }
}

akka {
  actor.provider = cluster
  remote.artery {
    canonical.hostname = "127.0.0.1"
    canonical.hostname = ${?LOCAL_IP} // this will override the default value with the env variable if set
    canonical.port = 25520

    untrusted-mode = on
    trusted-selection-paths = [
      "/system/cluster/core/daemon",
      "/system/cluster/heartbeatReceiver",
      "/system/distributedPubSubMediator",
      "/system/clusterReceptionist/replicator"
    ]

    advanced {
      outbound-message-queue-size = 30720 // 10x default because of sync
    }
  }
  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 10s # front won't start if back is offline
    roles = [frontend]
    seed-nodes = ["akka://eclair-node@"${eclair.front.backend.ip}":25520"]
  }
  coordinated-shutdown.terminate-actor-system = on
  coordinated-shutdown.exit-jvm = on
  //It is recommended to load the extension when the actor system is started by defining it in akka.extensions
  //configuration property. Otherwise it will be activated when first used and then it takes a while for it to be populated.
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]

}

kamon {
  environment.host = ${?HOSTNAME}
  instrumentation.akka {
    filters {
      actors {
        # Decides which actors generate Spans for the messages they process, given that there is already an ongoing trace
        # in the Context of the processed message (i.e. there is a Sampled Span in the Context).
        trace {
          includes = []
          excludes = ["**"] # we don't want automatically generated spans; we're not using them
        }
      }
    }
  }
}

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s
  loglevel = "DEBUG" # akka doc: You can enable DEBUG level for akka.loglevel and control the actual level in the SLF4J backend without any significant overhead, also for production.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}
